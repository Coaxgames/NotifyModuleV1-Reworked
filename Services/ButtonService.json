--TAG;/n{"ScreenGui":{"DestinationParent":"StarterGui","NME":"ScreenGui","Properties":{"Enabled":"true","AutoLocalize":"true","ResetOnSpawn":"true","IgnoreGuiInset":"false","Name":"ScreenGui","DisplayOrder":"0","Parent":"ProjectFolder","RootLocalizationTable":"nil","Archivable":"true","ZIndexBehavior":"Enum.ZIndexBehavior.Sibling"},"Parent":"ProjectFolder","CLS":"ScreenGui","Children":{"Controller":{"NME":"Controller","Parent":"ScreenGui","Properties":{"Enabled":"true","LinkedSource":"","Disabled":"false","Parent":"ScreenGui","Name":"Controller","Archivable":"true","Source":"\nlocal Player = game.Players.LocalPlayer\nlocal PlayerWS = game.Workspace:WaitForChild(Player.Name)\n\nlocal Humanoid = PlayerWS:WaitForChild(\"HumanoidRootPart\")\nlocal ServerSide=PlayerWS:WaitForChild(\"ThreadManager\"):FindFirstChild(\"ButtonService\")\n--local ServerSide = PlayerWS:WaitForChild(\"Manager\")\nlocal DataEv = ServerSide:WaitForChild(\"Data\")\nlocal HTTP = game:GetService(\"HttpService\")\nlocal ServiceEvent\nlocal ServerSettings\nlocal Settings={}\n\n\n\nif ServerSide~=nil then\n\t--Set Vars\n\tServiceEvent = ServerSide.Parent.Settings:FindFirstChild(\"PlayerGui\")\n\tServerSettings=ServerSide.Parent.Settings:GetChildren()\n\t--TEMP, REMOVE WHEN DONE TESTING\n\t--ServerSide=game.StarterPlayer.StarterCharacterScripts.ThreadManager\n\t--Ready\n\twarn(\"Setup Ready\")\n\twarn(ServerSettings)\n\n\tlocal SizeT=0\n\tlocal function Finalize(Button, Obj, PatchColor)\n\t\tif PatchColor then\n\t\t\tButton.BackgroundColor3=Color3.fromRGB(150, 0, 125)\n\t\telseif PatchColor==false then\n\t\t\tButton.BackgroundColor3=Color3.fromRGB(150, 55, 1)\n\t\tend\n\t\tButton.Title.Text=Obj.Name\n\t\tButton.Visible=true\n\t\tSizeT+=Button.Size.Y.Offset\n\tend\n\t\n\t--Create UI Elements\n\tfor i, Obj in pairs(ServerSide.Parent.Settings:GetChildren()) do\n\t\tlocal NewButton\n\t\tif Obj:IsA(\"BoolValue\") then\n\t\t\tNewButton = script.Assets.ToggleElement:Clone()\n\t\t\tNewButton.Parent=script.Parent.Frame\n\t\t\tNewButton.Name=Obj.Name\n\t\t\tNewButton.LocalScript.Enabled=true\n\t\t\tNewButton.LocalScript.Type.Value=\"Bool\"\n\t\t\tif Obj.Value == true then\n\t\t\t\tNewButton.TextButton.BackgroundColor3=Color3.fromRGB(15, 150, 0)\n\t\t\t\tNewButton.TextButton.Text=\"Enabled\"\n\t\t\telse \n\t\t\t\tNewButton.TextButton.BackgroundColor3=Color3.fromRGB(150, 0, 2)\n\t\t\t\tNewButton.TextButton.Text=\"Disabled\"\n\t\t\tend\n\t\t\tFinalize(NewButton, Obj, false)\n\t\telseif Obj:IsA(\"IntValue\") then\n\t\t\tNewButton = script.Assets.ToggleElement:Clone()\n\t\t\tNewButton.Parent=script.Parent.Frame\n\t\t\tNewButton.Name=Obj.Name\n\t\t\tNewButton.LocalScript.Type.Value=\"NumberString\"\n\t\t\tNewButton.LocalScript.Enabled=true\n\t\t\tNewButton.TextBox.BackgroundColor3=Color3.fromRGB(0, 138, 150)\n\t\t\tNewButton.TextBox.Text=Obj.Value\n\t\t\tFinalize(NewButton, Obj, true)\n\t\tend\n\t\t\n\tend\n\twarn(SizeT)\n\tscript.Parent.Frame.Size=UDim2.new(0, script.Parent.Frame.Size.X.Offset, 0, SizeT)\n\t\n\t\n\t--Fetch Setting From server\n\tlocal RequestState, SettingNew = ServiceEvent:InvokeServer(true, ServerSide.Parent.Settings.VisualDebug.Name)\n\tif RequestState==true then\n\t\twarn(RequestState)\n\t\twarn(SettingNew)\n\tend\n\t\nend\n\nscript.ButtonHandle.Event:Connect(function(ButtonName, DataPacket2, Debounce)\n\tif Debounce then\n\t\twarn\t(ButtonName..\" Interction!\")\n\t\twarn(DataPacket2)\n\t\tlocal IsValid=\"No Interaction\"\n\t\t--Button Functions are now serperated in code and conditions in \"ButtonService\"\n\t\t\n\t\tlocal function TestValidation(SkipState)\n\t\t\tlocal TMP = false\n\t\t\tif SkipState==1 then\n\t\t\t\tif DataPacket2[\"InteractionButton\"]==\"MouseButton1\" or DataPacket2[\"InteractionButton\"]==\"Touch\" then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\telseif SkipState==2 then\n\t\t\t\tif DataPacket2[\"Interaction\"]==\"FocusLost\" and DataPacket2[\"Type\"]==\"NumberString\" then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t return \"No Interaction (Unknown SkipState Provided)\"\n\t\t\tend\n\t\t\t\n\t\t\treturn \"Unknown Interaction Issue\"\n\t\tend\n\t\t\n\t\t\n\t\t--Interactions Allowed:\n\t\tif DataPacket2[\"Interaction\"] then\n\t\t\tif DataPacket2[\"InteractionButton\"] then\n\t\t\t\t--if DataPacket2[\"Interaction\"]==\"Begin\" then\n\t\t\t\tIsValid=TestValidation(1)\n\t\t\t\t--end\n\t\t\telse\n\t\t\t\tIsValid=TestValidation(2)\n\t\t\tend\n\t\t\twarn(IsValid)\n\t\tend\n\t\t\n\t\t--Data Handle\n\t\tif IsValid==true then\n\t\t\twarn(\"Element Requesting/Sending Server Data, Disabling Element and Firing Server!\")\n\t\t\tlocal DP = {--Disable Button\n\t\t\t\t[\"Clickable\"]=false,\n\t\t\t\t--[\"Color\"]=Color3.fromRGB(72, 72, 72),\n\t\t\t}\n\t\t\tscript.ButtonHandle:Fire(ButtonName, DP, false)--Send to button\n\n\n\n\t\t\t--Get Server Data, And make sure the button is disabled\n\t\t\tlocal DP={\n\t\t\t\t[\"ServerData\"]={\n\t\t\t\t\t[\"ToggleSetting\"]=ButtonName, --Tell Server to \n\t\t\t\t\t[\"Callback\"]=ButtonName, --Create Callback instance\n\t\t\t\t}\n\t\t\t}\n\t\t\t--Add the Data from the button to the server Packet\n\t\t\tfor i, Val in DataPacket2 do\n\t\t\t\tDP[\"ServerData\"][i]=Val\n\t\t\tend\n\t\t\tDataEv:FireServer(DP)--Fire off to server\n\t\telse\n\t\t\twarn(\"Server Not Called, ErMSG: \"..IsValid)\n\t\tend\n\t\t\n\t\treturn\n\tend\n\treturn\nend)\n\n--Request Data(Not Needed)\n--DataEv:FireServer(DataPacket)\n\n--Get Data\nDataEv.OnClientEvent:Connect(function(DataPacket2)\n\twarn(DataPacket2)\n\n\t--Callback function(This just feeds the Data from the Callback to the button that called the API)\n\tif DataPacket2[\"Callback\"] then\n\t\twarn(\"Correcting Button\")\n\t\tlocal NewPacket = {\n\t\t}\n\t\tfor i, Val in DataPacket2[\"Callback\"] do\n\t\t\tNewPacket[i]=Val\n\t\tend\n\t\tscript.ButtonHandle:Fire(DataPacket2[\"Callback\"][\"ButtonName\"], NewPacket, false)\n\tend\n\treturn\nend)\n"},"Children":{"Assets":{"NME":"Assets","Parent":"Controller","Properties":{"Parent":"Controller","Name":"Assets","Archivable":"true"},"Children":{"TextBox":{"NME":"TextBox","Parent":"Assets","Properties":{"NextSelectionLeft":"nil","TextWrapped":"true","LineHeight":"1","Active":"true","TextStrokeTransparency":"1","SelectionStart":"-1","TextTruncate":"Enum.TextTruncate.None","SizeConstraint":"Enum.SizeConstraint.RelativeXY","ZIndex":"1","BorderSizePixel":"0","TextEditable":"true","RichText":"false","AutoLocalize":"true","NextSelectionDown":"nil","Transparency":"0","Parent":"Assets","Name":"TextBox","TextYAlignment":"Enum.TextYAlignment.Center","TextScaled":"true","BackgroundColor3":"0.666667, 0, 0.0117647","Archivable":"true","FontFace":"Font { Family = rbxasset://fonts/families/SourceSansPro.json, Weight = Regular, Style = Normal }","ShowNativeInput":"true","BorderMode":"Enum.BorderMode.Outline","Selectable":"true","TextTransparency":"0","PlaceholderColor3":"0.7, 0.7, 0.7","MultiLine":"false","AnchorPoint":"0, 0","CursorPosition":"1","ClearTextOnFocus":"false","TextXAlignment":"Enum.TextXAlignment.Center","NextSelectionRight":"nil","PlaceholderText":"","AutomaticSize":"Enum.AutomaticSize.None","Size":"{0, 50}, {0, 20}","TextStrokeColor3":"0, 0, 0","TextSize":"14","LayoutOrder":"0","ClipsDescendants":"false","BorderColor3":"0, 0, 0","Text":"TextBox","TextColor3":"0, 0, 0","RootLocalizationTable":"nil","Rotation":"0","Font":"Enum.Font.SourceSans","BackgroundTransparency":"0","Position":"{1, 0}, {-0.0299999993, 0}","Visible":"true","MaxVisibleGraphemes":"-1","NextSelectionUp":"nil","SelectionImageObject":"nil"},"Children":{"UICorner":{"NME":"UICorner","Parent":"TextBox","Properties":{"Parent":"TextBox","Name":"UICorner","Archivable":"true","CornerRadius":"0, 8"},"Children":[],"CLS":"UICorner"}},"CLS":"TextBox"},"TextButton":{"NME":"TextButton","Parent":"Assets","Properties":{"LayoutOrder":"0","TextWrapped":"true","LineHeight":"1","Active":"true","TextStrokeTransparency":"1","TextTruncate":"Enum.TextTruncate.None","SizeConstraint":"Enum.SizeConstraint.RelativeXY","ZIndex":"1","BorderSizePixel":"0","RichText":"false","AutoLocalize":"true","NextSelectionDown":"nil","AutoButtonColor":"true","Transparency":"0","TextYAlignment":"Enum.TextYAlignment.Center","TextScaled":"true","BackgroundColor3":"0.666667, 0, 0.0117647","FontFace":"Font { Family = rbxasset://fonts/families/SourceSansPro.json, Weight = Regular, Style = Normal }","Parent":"Assets","BorderMode":"Enum.BorderMode.Outline","Selectable":"true","Name":"TextButton","Archivable":"true","TextStrokeColor3":"0, 0, 0","AnchorPoint":"0, 0","Modal":"false","TextXAlignment":"Enum.TextXAlignment.Center","TextTransparency":"0","NextSelectionRight":"nil","Selected":"false","AutomaticSize":"Enum.AutomaticSize.None","Size":"{0, 50}, {0, 20}","TextSize":"14","TextColor3":"0, 0, 0","Visible":"false","ClipsDescendants":"false","BorderColor3":"0, 0, 0","Text":"Button","BackgroundTransparency":"0","RootLocalizationTable":"nil","Rotation":"0","Font":"Enum.Font.SourceSans","Style":"Enum.ButtonStyle.Custom","Position":"{1, 0}, {-0.0303029381, 0}","NextSelectionUp":"nil","MaxVisibleGraphemes":"-1","NextSelectionLeft":"nil","SelectionImageObject":"nil"},"Children":{"UICorner":{"NME":"UICorner","Parent":"TextButton","Properties":{"Parent":"TextButton","Name":"UICorner","Archivable":"true","CornerRadius":"0, 8"},"Children":[],"CLS":"UICorner"}},"CLS":"TextButton"},"ToggleElement":{"NME":"ToggleElement","Parent":"Assets","Properties":{"Visible":"false","Active":"false","Selectable":"false","Parent":"Assets","Name":"ToggleElement","AnchorPoint":"0, 0","Archivable":"true","RootLocalizationTable":"nil","NextSelectionUp":"nil","NextSelectionRight":"nil","ZIndex":"1","AutomaticSize":"Enum.AutomaticSize.None","Size":"{0, 80}, {0, 20}","SizeConstraint":"Enum.SizeConstraint.RelativeXY","BorderSizePixel":"0","AutoLocalize":"true","ClipsDescendants":"false","BorderColor3":"0, 0, 0","NextSelectionLeft":"nil","NextSelectionDown":"nil","LayoutOrder":"0","Rotation":"0","Transparency":"0","Style":"Enum.FrameStyle.Custom","SelectionImageObject":"nil","BorderMode":"Enum.BorderMode.Outline","BackgroundTransparency":"0","Position":"{0, 0}, {0, 0}","BackgroundColor3":"0.443137, 0.443137, 0.443137"},"Children":{"UICorner":{"NME":"UICorner","Parent":"ToggleElement","Properties":{"Parent":"ToggleElement","Name":"UICorner","Archivable":"true","CornerRadius":"0, 8"},"Children":[],"CLS":"UICorner"},"Title":{"NME":"Title","Parent":"ToggleElement","Properties":{"NextSelectionLeft":"nil","TextWrapped":"false","LineHeight":"1","Active":"false","TextStrokeTransparency":"1","TextTruncate":"Enum.TextTruncate.None","SizeConstraint":"Enum.SizeConstraint.RelativeXY","ZIndex":"1","BorderSizePixel":"0","RichText":"false","AutoLocalize":"true","NextSelectionDown":"nil","Transparency":"1","TextYAlignment":"Enum.TextYAlignment.Center","TextScaled":"false","BackgroundColor3":"1, 1, 1","FontFace":"Font { Family = rbxasset://fonts/families/SourceSansPro.json, Weight = Regular, Style = Normal }","BorderMode":"Enum.BorderMode.Outline","Selectable":"false","Parent":"ToggleElement","AnchorPoint":"0, 0","Name":"Title","Archivable":"true","TextXAlignment":"Enum.TextXAlignment.Center","NextSelectionRight":"nil","TextTransparency":"1","AutomaticSize":"Enum.AutomaticSize.None","Size":"{1, 0}, {1, 0}","TextStrokeColor3":"0, 0, 0","TextSize":"14","LayoutOrder":"0","ClipsDescendants":"false","BorderColor3":"0, 0, 0","Text":"Label","TextColor3":"0, 0, 0","RootLocalizationTable":"nil","Rotation":"0","Font":"Enum.Font.SourceSans","BackgroundTransparency":"1","Position":"{0, 0}, {0, 0}","Visible":"true","MaxVisibleGraphemes":"-1","NextSelectionUp":"nil","SelectionImageObject":"nil"},"Children":[],"CLS":"TextLabel"},"LocalScript":{"NME":"LocalScript","Parent":"ToggleElement","Properties":{"Enabled":"false","LinkedSource":"","Disabled":"true","Parent":"ToggleElement","Name":"LocalScript","Archivable":"true","Source":"local Input = script.Type.Value\nlocal Ev = script.Parent.Parent.Parent.Controller:WaitForChild(\"ButtonHandle\")\nlocal DP = {\n}\nlocal Clickable=true\nif Input==nil then\n\twarn(\"No Input Mode Set!\")\n\tInput = script.Type.Value\n\tif Input==nil then\n\t\treturn\t\n\tend\n\twarn(\"Patched Mode\")\nend\nif string.match(Input, \"Toggle\") then\n\tInput = script.Parent.Parent.Parent.Controller.Assets.TextButton:Clone()\nelseif string.match(Input, \"Number\") then\n\tInput = script.Parent.Parent.Parent.Controller.Assets.TextBox:Clone()\nend\n\n\nInput.Parent=script.Parent\nInput.Visible=true\n\n--Input Began()\nInput.InputBegan:Connect(function(Input1)\n\tprint(Input1)\n\tprint(Input1.UserInputType.Name)\n\tprint(Input1.UserInputState.Name)\n\tif Clickable==false then\n\t\twarn(\"Button Disabled!\")\n\t\treturn\n\tend\n\t\n\tDP={\n\t\t[\"Interaction\"]=Input1.UserInputState.Name,\n\t\t[\"InteractionButton\"]=Input1.UserInputType.Name,\n\t\t[\"Type\"]=script.Type.Value,\n\t\t[\"ButtonName\"]=script.Parent.Name,\n\t}\n\tif type(Input1)==\"table\" then\n\t\tif string.find(Input.ClassName, \"TextBox\") then\n\t\t\tDP[\"Text\"]=Input.Text\n\t\t\tif table.find(Input1, \"KeyCode\") then\n\t\t\t\tDP[\"KeyCode\"]=Input1.KeyCode.Name\n\t\t\tend\n\t\t\tEv:Fire(script.Parent.Name, DP, true)\n\t\telseif string.find(Input.ClassName, \"TextButton\") then\n\t\t\tif Input1.UserInputType.Name==\"MouseButton1\" or Input1.UserInputType.Name==\"Touch\" then\n\t\t\t\tEv:Fire(script.Parent.Name, DP, true)\n\t\t\tend\n\t\telse\n\t\t\tEv:Fire(script.Parent.Name, DP, true)\n\t\tend\n\telse\n\t\tEv:Fire(script.Parent.Name, DP, true)\n\tend\n\t\n\t--Ev:Fire(script.Parent.Name, DP, true)\nend)\n\nif script.Type.Value==\"NumberString\" then\n\t--TextBox Focus lost Handle\n\tInput.FocusLost:Connect(function(Val, Val2)\n\t\tif Clickable==false then\n\t\t\twarn(\"TextBox Disabled!\")\n\t\t\treturn\n\t\tend\n\t\twarn(\"Finished\")\n\t\tprint(Input)\n\t\tprint(Val)\n\t\tprint(Val2)\n\t\tInput.Text = string.gsub(Input.Text, \"%a\", \"\")\n\t\tInput.Text = string.gsub(Input.Text, \"%p\", \"\")\n\t\tInput.Text = string.gsub(Input.Text, \"%s\", \"\")\n\t\tDP={\n\t\t\t[\"Interaction\"]=\"FocusLost\",\n\t\t\t[\"Text\"]=Input.Text,\n\t\t\t[\"Type\"]=script.Type.Value,\n\t\t\t[\"ButtonName\"]=script.Parent.Name\n\t\t}\n\t\tEv:Fire(script.Parent.Name, DP, true)\n\tend)\nelse\n\twarn(\"Possible Failure on \"..script.Parent.Name)\nend\n\n\n--Callback Event\nEv.Event:Connect(function(ButtonName, DataPacket, Debounce)\n\tif Debounce==false and script.Parent.Name==ButtonName then\n\n\t\t--Clickable Flag(Disables Player Interaction with the element, Good for loading or setting a delay from the server)\n\t\tif DataPacket[\"Clickable\"]~=nil then\n\t\t\tClickable=DataPacket[\"Clickable\"]\n\t\tend\n\t\t\n\t\t--force Val(Consider removing the color stuff, the script is streamline so it wont matter if Color flag is more used)\n\t\tif DataPacket[\"ForceVal\"]~=nil then\n\t\t\tif string.find(Input.ClassName, \"TextBox\") then\n\t\t\t\tInput.Text=DataPacket[\"ForceVal\"]\n\t\t\telseif string.find(Input.ClassName, \"TextButton\") then\n\t\t\t\tif DataPacket[\"ForceVal\"] == true then\n\t\t\t\t\tInput.BackgroundColor3=Color3.fromRGB(15, 150, 0)\n\t\t\t\t\tInput.Text=\"Enabled\"\n\t\t\t\telseif DataPacket[\"ForceVal\"] == false then\n\t\t\t\t\tInput.BackgroundColor3=Color3.fromRGB(150, 0, 2)\n\t\t\t\t\tInput.Text=\"Disabled\"\n\t\t\t\telse\n\t\t\t\t\tInput.Text=DataPacket[\"ForceVal\"]\n\t\t\t\tend\n\t\t\telseif string.find(Input.ClassName, \"TextLabel\") then\n\t\t\t\tInput.Text=DataPacket[\"ForceVal\"]\n\t\t\tend\t\n\t\tend\n\t\t\n\t\t--color flag\n\t\tif DataPacket[\"Color\"]~=nil then\n\t\t\tif DataPacket[\"Color\"]==\"Red\" then\n\t\t\t\tInput.BackgroundColor3=Color3.fromRGB(150, 0, 2)\n\t\t\telseif DataPacket[\"Color\"]==\"Green\" then\n\t\t\t\tInput.BackgroundColor3=Color3.fromRGB(15, 150, 0)\n\t\t\telse\n\t\t\t\tpcall(function()\n\t\t\t\t\tInput.BackgroundColor3=DataPacket[\"Color\"]\n\t\t\t\tend)\n\t\t\tend\n\t\tend\n\t\t\n\t\t--remove flag\n\t\tif DataPacket[\"RemoveElem\"]==true then\n\t\t\tscript.Parent:Destroy()\n\t\t\tscript.Enabled=false\n\t\tend\n\n\n\t\twarn(ButtonName..\" Recieved Event\")\n\t\twarn(DataPacket)\n\tend\nend)\t\n\n\n--Gotta patch the old function of text box into controller, so we can filter stuff\n--Also make sure it works with the element system, at the time of doing this i was to bored\n--[[Input.InputBegan:Connect(function(input)\n\tlocal DataPacket={\n\t\t[\"InVal\"]=input.UserInputState.Name,\n\t\t[\"InType\"]=input.UserInputType.Name,\n\t\t[\"KeyCode\"]=input.KeyCode.Name,\n\t\t[\"Text\"]=Input.Text,\n\t\t[\"Type\"]=script.Type.Value\n\t}\n\twarn(DataPacket)\n\tif script.Type.Value==\"Number\" then\n\t\tInput.FocusLost:Connect(function()\n\t\t\twarn(\"Finished\")\n\t\t\tInput.Text = string.gsub(Input.Text, \"%a\", \"\")\n\t\t\tInput.Text = string.gsub(Input.Text, \"%p\", \"\")\n\t\t\tInput.Text = string.gsub(Input.Text, \"%s\", \"\")\n\t\t\tDataPacket={\n\t\t\t\t[\"InVal\"]=input.UserInputState.Name,\n\t\t\t\t[\"InType\"]=input.UserInputType.Name,\n\t\t\t\t[\"KeyCode\"]=input.KeyCode.Name,\n\t\t\t\t[\"Text\"]=Input.Text,\n\t\t\t\t[\"Type\"]=script.Type.Value\n\t\t\t}\n\t\t\tscript.Parent.Parent.Parent.Controller.ButtonHandle:Fire(DataPacket)\n\t\tend)\n\telse\n\t\tscript.Parent.Parent.Parent.Controller.ButtonHandle:Fire(DataPacket)\n\tend\n\t\nend)]]"},"Children":{"Type":{"NME":"Type","Parent":"LocalScript","Properties":{"Value":"Toggle","Parent":"LocalScript","Archivable":"true","Name":"Type"},"Children":[],"CLS":"StringValue"}},"CLS":"LocalScript"}},"CLS":"Frame"}},"CLS":"Folder"},"ButtonHandle":{"NME":"ButtonHandle","Parent":"Controller","Properties":{"Parent":"Controller","Name":"ButtonHandle","Archivable":"true"},"Children":[],"CLS":"BindableEvent"}},"CLS":"LocalScript"},"MB":{"NME":"MB","Parent":"ScreenGui","Properties":{"NextSelectionLeft":"nil","TextWrapped":"true","LineHeight":"1","Active":"true","TextStrokeTransparency":"1","SelectionStart":"-1","TextTruncate":"Enum.TextTruncate.None","SizeConstraint":"Enum.SizeConstraint.RelativeXY","ZIndex":"1","BorderSizePixel":"0","TextEditable":"false","RichText":"false","AutoLocalize":"true","NextSelectionDown":"nil","Transparency":"0","Parent":"ScreenGui","Name":"MB","TextYAlignment":"Enum.TextYAlignment.Center","TextScaled":"false","BackgroundColor3":"1, 1, 1","Archivable":"true","FontFace":"Font { Family = rbxasset://fonts/families/SourceSansPro.json, Weight = Regular, Style = Normal }","ShowNativeInput":"true","BorderMode":"Enum.BorderMode.Outline","Selectable":"true","TextTransparency":"0","PlaceholderColor3":"0, 0, 0","MultiLine":"false","AnchorPoint":"0, 0","CursorPosition":"1","ClearTextOnFocus":"true","TextXAlignment":"Enum.TextXAlignment.Center","NextSelectionRight":"nil","PlaceholderText":"Terrain","AutomaticSize":"Enum.AutomaticSize.None","Size":"{0, 50}, {0, 15}","TextStrokeColor3":"0, 0, 0","TextSize":"14","LayoutOrder":"0","ClipsDescendants":"false","BorderColor3":"0, 0, 0","Text":"Terrain","TextColor3":"0, 0, 0","RootLocalizationTable":"nil","Rotation":"0","Font":"Enum.Font.SourceSans","BackgroundTransparency":"0","Position":"{0, 248}, {0, 7}","Visible":"true","MaxVisibleGraphemes":"-1","NextSelectionUp":"nil","SelectionImageObject":"nil"},"Children":{"UICorner":{"NME":"UICorner","Parent":"MB","Properties":{"Parent":"MB","Name":"UICorner","Archivable":"true","CornerRadius":"0, 8"},"Children":[],"CLS":"UICorner"}},"CLS":"TextBox"},"Dest":{"NME":"Dest","Parent":"ScreenGui","Properties":{"Value":"StarterGui","Parent":"ScreenGui","Archivable":"true","Name":"Dest"},"Children":[],"CLS":"StringValue"},"Frame":{"NME":"Frame","Parent":"ScreenGui","Properties":{"Visible":"true","Active":"false","Selectable":"false","Parent":"ScreenGui","Name":"Frame","AnchorPoint":"0, 0","Archivable":"true","RootLocalizationTable":"nil","NextSelectionUp":"nil","NextSelectionRight":"nil","ZIndex":"1","AutomaticSize":"Enum.AutomaticSize.None","Size":"{0, 130}, {0, 220}","SizeConstraint":"Enum.SizeConstraint.RelativeXY","BorderSizePixel":"0","AutoLocalize":"true","ClipsDescendants":"false","BorderColor3":"0, 0, 0","NextSelectionLeft":"nil","NextSelectionDown":"nil","LayoutOrder":"0","Rotation":"0","Transparency":"0.699999988079071","Style":"Enum.FrameStyle.Custom","SelectionImageObject":"nil","BorderMode":"Enum.BorderMode.Outline","BackgroundTransparency":"0.699999988079071","Position":"{0.00936903805, 0}, {0.37542057, 0}","BackgroundColor3":"0.262745, 0.262745, 0.262745"},"Children":{"UICorner":{"NME":"UICorner","Parent":"Frame","Properties":{"Parent":"Frame","Name":"UICorner","Archivable":"true","CornerRadius":"0, 8"},"Children":[],"CLS":"UICorner"},"UIListLayout":{"NME":"UIListLayout","Parent":"Frame","Properties":{"VerticalAlignment":"Enum.VerticalAlignment.Top","FillDirection":"Enum.FillDirection.Vertical","HorizontalAlignment":"Enum.HorizontalAlignment.Left","Name":"UIListLayout","Parent":"Frame","Padding":"0, 0","Archivable":"true","SortOrder":"Enum.SortOrder.Name"},"Children":[],"CLS":"UIListLayout"}},"CLS":"Frame"}},"PackageInfo":{"PackageNME":"ScreenGui","PackageDESC":"No Desc information Set!"}},"ButtonService":{"DestinationParent":"StarterCharacterScripts","NME":"ButtonService","Properties":{"Enabled":"true","LinkedSource":"","Disabled":"false","Parent":"ProjectFolder","Name":"ButtonService","Archivable":"true","Source":"--Setting Menu Pipeline\nlocal DataEv = script.Data\nlocal PlayerWS = script.Parent.Parent\nlocal Player = game.Players[PlayerWS.Name]\nlocal Humanoid = script.Parent.Parent:WaitForChild(\"HumanoidRootPart\")\nlocal HostComs = script:FindFirstChild(\"HostFunction\")\nlocal HTTP = game:GetService(\"HttpService\")\nwarn(\"Starting\")\nlocal ErrorLog = script.Parent:FindFirstChild(\"ErrorLog\")\nlocal ErrorLogs = {} --Store errors here and append them to the folder in string vars with 1m char limits, so we can save em in batches\n--Also consider sending these error log batches to a server script(Or just save them here as this is a Serverscript)\nlocal function LogError(ErCode : \"ErrorCode, Format=0000:(Severity, Interaction, Id1, Id2)\", ErMSG : \"Error MSG\")\n\tErrorLogs[(#ErrorLogs+1)] = {\n\t\t[\"Count\"]=(#ErrorLogs),\n\t\t[\"ErMSG\"]=ErMSG,\n\t\t[\"ErCode\"]=ErCode,\n\t}\n\tlocal Str = Instance.new(\"StringValue\")\n\tStr.Name = ErrorLogs[(#ErrorLogs)][\"Count\"]\n\tStr.Value =HTTP:JSONEncode(ErrorLogs[(#ErrorLogs)])\n\tStr.Parent=ErrorLog\n\t\n\t--Also add dataStore, however use batch method also when server closing\n\twarn(\"[\"..(#ErrorLogs)..\"]\"..ErCode..\"|\"..ErMSG)\n\treturn ErCode..\"|\"..ErMSG\nend\n\n\n\nif DataEv~=nil then\n\tif PlayerWS==nil then\n\t\tPlayerWS = script.Parent\n\t\tPlayer = game.Players[PlayerWS.Name]\n\tend\n\tif Humanoid==nil then\n\t\tHumanoid = script.Parent:WaitForChild(\"HumanoidRootPart\")\n\t\tif Humanoid.Name~=\"HumanoidRootPart\" then\n\t\t\twarn(\"Error\")\n\t\t\tgame.Players[PlayerWS.Name]:Kick(\"Error locating player\")\n\t\telse\n\t\t\tPlayer = game.Players[PlayerWS.Name]\n\t\tend\n\tend\n\twarn(\"Initilized With: \"..Player.UserId..\"|\"..PlayerWS.Name)\n\tDataEv.OnServerEvent:Connect(function(Plr, Data)\n\t\tlocal function ButtonCallBack()--Fire this to Re-enable the button that was pressed\n\t\t\tlocal DP={ [\"Callback\"]={ --Assign the callback for later\n\t\t\t\t--[\"Color\"]=Color3.new(255,255,255),\n\t\t\t\t[\"Clickable\"]=true,\n\t\t\t\t[\"ButtonName\"]=Data[\"ServerData\"][\"Callback\"]\n\t\t\t}\n\t\t\t}\n\n\t\t\t--the Checks we want done before the API Call, if return is true then API call is allowed\n\t\t\tif Data[\"ServerData\"][\"ToggleSetting\"]==\"\" then\n\t\t\t\twarn(\"No Valid Data!\")\n\t\t\t\t--DataEv:FireClient(Plr, DP) --Re-enable Button(Fire Callback)\n\t\t\t\treturn false, DP, \"No Valid Data!\"\n\t\t\tend\n\n\t\t\t--Finish and return if no issues\n\t\t\t--DataEv:FireClient(Plr, DP) --Re-enable Button(Fire Callback)\n\t\t\treturn true, DP, \"Null\"\n\t\tend\n\t\t\n\t\tif Plr.UserId==Player.UserId then\n\t\t\twarn(Data)\n\t\t\t--Deal with Inline Player data fetching, so we can make 2 inline calls/functions. \n\t\t\tif table.find(Data, \"PlayerData\") then--Inline Function 1\n\t\t\t\tif Data[\"PlayerData\"][\"Request\"]==\"Test\" then\n\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\t--Inline Function 2\n\t\t\tif Data[\"ServerData\"] then\n\t\t\t\tif Data[\"ServerData\"][\"Callback\"] then\n\t\t\t\t\t\n\t\t\t\t\t--Setup Callback,  Format:(ServerCheckPass, Datapacket, ErMSG)\n\t\t\t\t\tpcall(function() warn(\"Creating Callback for: \"..Data[\"ServerData\"][\"Callback\"]) end)\n\t\t\t\t\tlocal CanCall, DP, ER = ButtonCallBack()--Create Callback\n\t\t\t\t\tpcall(function() warn(\"Created Callback for: \"..DP[\"Callback\"][\"ButtonName\"]) end)\n\t\t\t\t\t\n\t\t\t\t\tLogError(\"#0900\", ER)\n\t\t\t\t\t--Add Com network for the host script to connect to, as this buttonService is just dealing with the basics\n\t\t\t\t\t--If we need to add function we are gonna have to call a function For calling data to this script:\n\t\t\t\t\t--MY GOAL: I need to request Settings data from the host script while doing so make it into a service for other shit\n\t\t\t\t\t--so i dont have to do this 80 times\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t--Get setting Data\n\t\t\t\t\tlocal BName=DP[\"Callback\"][\"ButtonName\"]\n\t\t\t\t\tlocal SettingName, State, NewState, ErMSG \n\t\t\t\t\tlocal SettingData, SettingState, SettingType\n\t\t\t\t\t\n\t\t\t\t\t--Get the Setting Data from Host(make sure to test this as a service later down the line!! )\n\t\t\t\t\tif PlayerWS:FindFirstChild(\"ThreadManager\") then\n\t\t\t\t\t\tfor i, Obj in PlayerWS:FindFirstChild(\"ThreadManager\"):FindFirstChild(\"Settings\"):GetChildren() do\n\t\t\t\t\t\t\tif Obj.Name==BName then\n\t\t\t\t\t\t\t\tSettingData=Obj\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\twarn(SettingData.Value)\n\t\t\t\t\t--Set n Check: Value and type\n\t\t\t\t\tif SettingData~=nil then\n\t\t\t\t\t\tif Data[\"ServerData\"][\"Type\"]==\"NumberString\" then\n\t\t\t\t\t\t\tSettingState=Data[\"ServerData\"][\"Text\"]\n\t\t\t\t\t\telseif Data[\"ServerData\"][\"Type\"]==\"TextString\" then\n\t\t\t\t\t\t\tSettingState=Data[\"ServerData\"][\"Text\"]\n\t\t\t\t\t\telseif Data[\"ServerData\"][\"Type\"]==\"Bool\" then\n\t\t\t\t\t\t\tSettingState=not SettingData.Value\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tSettingState=not SettingData.Value\n\t\t\t\t\t\tend\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t--pcall(function() \n\t\t\t\t\t\t--SettingState=SettingData.Value\n\t\t\t\t\t\tSettingType=tostring(Data[\"ServerData\"][\"Type\"])\n\t\t\t\t\t\t--end)\n\t\t\t\t\t\tif SettingType==nil or SettingState==nil then\n\t\t\t\t\t\t\tCanCall=false\n\t\t\t\t\t\t\tER=LogError(\"#3112\", \"Setting Type/State Missing\")\n\t\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\tER=LogError(\"#3113\", \"Setting Data Missing\")\n\t\t\t\t\t\tCanCall=false\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t--Set and Get new Setting Data here\n\t\t\t\t\tif ER==\"Null\" then\n\t\t\t\t\t\twarn(\"Calling Main Script\")\n\t\t\t\t\t\tSettingName, State, NewState, ErMSG = HostComs:Invoke(SettingData, SettingState, SettingType)\n\t\t\t\t\t\twarn(\"Results:\")\n\t\t\t\t\t\twarn(SettingName)\n\t\t\t\t\t\twarn(State)\n\t\t\t\t\t\twarn(NewState)\n\t\t\t\t\t\twarn(ErMSG)\n\t\t\t\t\t\tLogError(\"#0901\", ErMSG)\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t--if True all server checks passed, then run this\n\t\t\t\t\t--Add Setting Limitations, and such above in ButtonCallBack Fucntion, However we can also check here if needed, ~ \n\t\t\t\t\t--~by setting cancall False\n\t\t\t\t\n\t\t\t\t\t--Use this section as a wrapper/Handler, This has been replaced with the stuff above. \n\t\t\t\t\t--Or use this as a gate for futher safecode\n\t\t\t\t\tif CanCall==true and ErMSG==\"Null\" then\n\t\t\t\t\t\t--run Our code here, Server checks are in button callback function,\n\t\t\t\t\t\t--that or we can just prevent firing here as well similar to above(Or adding flags to the DP)\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tDataEv:FireClient(Plr, DP) --Re-enable Button(Fire Callback)\n\t\t\t\t\t\twarn(\"Fired Callback, Data Good!\")\n\t\t\t\t\t\treturn \"Not Setup Yet, Data Good!\"\n\t\t\t\t\telse\t--if Server Check Fails then Warn and move on with returning the packet\n\t\t\t\t\t\tif ErMSG~=nil then\n\t\t\t\t\t\t\tER=LogError(\"#2012\", \"API was called but failed\")\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tER=LogError(\"#6011\", \"Data for API Call was NIL\")\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif ER~=\"Null\" and ER~=nil then\n\t\t\t\t\t\t\tLogError(\"#2022\", \"API not called: \"..ER)\n\t\t\t\t\t\telseif ER==nil then\n\t\t\t\t\t\t\tER=LogError(\"#6022\", \"Data for API Prep was NIL.\")\n\t\t\t\t\t\tend\n\t\t\t\t\t\tDataEv:FireClient(Plr, DP) --Re-enable Button(Fire Callback)\n\t\t\t\t\t\treturn ER\n\t\t\t\t\tend\n\n\t\t\t\telse\n\t\t\t\t\t--Fail condition fires back the data as is\n\t\t\t\t\tDataEv:FireClient(Plr, Data)\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t--Fail condition fires back the data as is\n\t\t\t\tDataEv:FireClient(Plr, Data)\n\t\t\tend\n\t\telse\n\t\t\t--Will be usless soon \n\t\t\twarn(\"Player Mismatch, Attempted Exploit from \"..Plr.UserId..\" Trying to Exploit \"..Player.UserId)\n\t\tend\n\tend)\nend\n\n\n"},"Parent":"ProjectFolder","CLS":"Script","Children":{"HostFunction":{"NME":"HostFunction","Parent":"ButtonService","Properties":{"Parent":"ButtonService","Name":"HostFunction","Archivable":"true"},"Children":[],"CLS":"BindableFunction"},"Data":{"NME":"Data","Parent":"ButtonService","Properties":{"Parent":"ButtonService","Name":"Data","Archivable":"true"},"Children":[],"CLS":"RemoteEvent"},"Dest":{"NME":"Dest","Parent":"ButtonService","Properties":{"Value":"StarterCharacterScripts","Parent":"ButtonService","Archivable":"true","Name":"Dest"},"Children":[],"CLS":"StringValue"}},"PackageInfo":{"PackageNME":"ButtonService","PackageDESC":"No Desc information Set!"}}}
