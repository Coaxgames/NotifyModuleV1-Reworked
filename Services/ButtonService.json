--TAG;/n{"ThreadManager":{"DestinationParent":"StarterCharacterScripts","NME":"ThreadManager","Properties":{"Enabled":"true","LinkedSource":"","Disabled":"false","Parent":"ProjectFolder","Name":"ThreadManager","Archivable":"true","Source":"print(\"Running Actor tester\")\n--Setup Threads\nlocal actor = script:GetActor()\nlocal Threads = {}\nlocal PlayerChar = script.Parent:WaitForChild(\"HumanoidRootPart\")\n\n--Server Settings\nlocal Size=20\nlocal RenderLimit = 120--Read Below\nlocal ThreadVersion = 2\n\n--Preset Colors for buttonService\nlocal ColorIndex={\n\t[\"OffColor\"]=Color3.fromRGB(150, 0, 2),\n\t[\"OnColor\"]=Color3.fromRGB(15, 150, 0),\n}\n\n--Player Settings-----\nlocal RenderDist=script.Settings.RenderDistance.Value or 80\nlocal LazyChunks=script.Settings.LazyChunks.Value or false\nlocal HelpingServer=script.Settings.HelpingServer.Value or false\nlocal ThreadsHelping=script.Settings.HelpingServer.Threads.Value or 1\nlocal ChunkInvertion= script.Settings.ChunkInvertion.Value or false\n--GamepassLocked Player Settings\nlocal RenderLock = true --public servers(Limited to 120 and Locked to that), Priv servers(limit of 480, and are unlockable){Desc: Locks render dist to max of 120}\nlocal ThreadLimit= 4 --(4 for regular users total, Priv servers get 6) Gamepass will multiply this by 2 (8 Normal servers, 12 with Priv Servers)\nlocal ThreadSpeed= script.Settings.ThreadSpeed.Value or 0.01\n--Player Settings-----\n\n--ButtonService--\nlocal HostComs = script:FindFirstChild(\"ButtonService\")\nif HostComs~=nil then\n\tHostComs = HostComs:FindFirstChild(\"HostFunction\")\nend\n\n--Locker--\nif ThreadVersion <= 2 then\n\tThreadVersion=2\nend\nif RenderLock==false then\n\tRenderLimit = 480\n\tif game.PrivateServerId ~= \"\" then\n\t\tif game.PrivateServerOwnerId ~= 0 then\n\t\t\tRenderLimit = 480\n\t\t\tRenderLock = true --Unlock here if gamepass owned, it unlocks the RenderLimit via {if [RenderLimit <= RenderDist and RenderLock==true]}\n\t\telse\n\t\t\tRenderLimit = 120\n\t\t\tRenderLock = true\n\t\tend\n\telse\n\t\tRenderLimit = 120\n\t\tRenderLock = true --Relock render limit, Allow it to be unlocked with a Priv server check(if {priv server} then [Unlock], Else [Lock])\n\tend\nend\n\n\n\n--------Script Start----------\n--Basic/Nececary\nfunction roundNumber(num, numDecimalPlaces)\n\treturn string.format(\"%.\" .. (numDecimalPlaces or 0) .. \"f\", num)\nend\nfunction round2(n, to)\n\treturn math.floor(n/to + 0.5) * to\nend\nroundNumber(ThreadVersion, 2)\n\n--Functions relating to a custom use case\nlocal function GetPlayerPos()\n\tPlayerChar = script.Parent:FindFirstChild(\"HumanoidRootPart\")\n\tlocal PX=PlayerChar.Position.X\n\tPX = math.clamp(PX, PX-RenderDist, PX+RenderDist)\n\tPX = round2(PlayerChar.Position.X/1, Size)\n\tlocal PZ=PlayerChar.Position.Z\n\tPZ = math.clamp(PZ, PZ-RenderDist, PZ+RenderDist)\n\tPZ = round2(PlayerChar.Position.Z/1, Size)\n\tlocal NewVec=Vector3.new(PX, -2.1, PZ)\n\treturn NewVec\nend\n\n--Thread Listener(Handler)\nfunction StartListener(Func)\n\t--This needs to be reworked\n\t--for i, Func in pairs(Threads) do\n\twarn(Threads)\n\tFunc[1].Function.OnInvoke = function(ThreadType, ThreadName, UpdatedPos, NewChunkGrid)\n\t\tRenderDist=round2(script.Settings.RenderDistance.Value, Size)\n\t\tscript.Settings.RenderDistance.Value=RenderDist\n\t\tLazyChunks=script.Settings.LazyChunks.Value\n\t\tHelpingServer=script.Settings.HelpingServer.Value\n\t\tThreadsHelping=script.Settings.HelpingServer.Threads.Value\n\t\tThreadSpeed=script.Settings.ThreadSpeed.Value\n\t\tChunkInvertion=script.Settings.ChunkInvertion.Value\n\t\t\n\t\tif ThreadSpeed~=nil then\n\t\t\tif ThreadSpeed >= 0.02 then\n\t\t\t\twait(ThreadSpeed)\n\t\t\tend\n\t\tend\n\t\t\n\t\t--warn(\"/:\"..ThreadName..\";\"..\" Thread CMD Received\")\n\t\t--Check Thread Type\n\t\tif ThreadType==\"GridThread\" then\n\t\t\tlocal Dist = (UpdatedPos - PlayerChar.Position).Magnitude\n\t\t\t--warn(\"Running\")\n\t\t\t--warn(UpdatedPos)\n\t\t\t--warn(Dist)\n\t\t\tlocal NewVec\n\t\t\tlocal PX=PlayerChar.Position.X\n\t\t\tlocal PZ=PlayerChar.Position.Z\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif ThreadVersion==1 then\n\n\n\t\t\t\t--Select a random \"GeneralThread\" to gen the chunk blocks\n\t\t\t\tif NewChunkGrid~=nil then\n\t\t\t\t\tfor i, Thread in pairs(Threads) do\n\t\t\t\t\t\tif Thread[1].Type.Value==\"GeneralThread\" then\n\t\t\t\t\t\t\tThread[2]:SendMessage(\"Begin\", \"GeneralThread\", UpdatedPos, RenderDist, LazyChunks, PlayerChar.Parent, NewChunkGrid, \"ChunkNameInputHere\")\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t--make the GridThread continue work\n\t\t\t\tif HelpingServer~=true then\n\t\t\t\t\tPX = math.clamp(PX-UpdatedPos.X, PX-RenderDist, PX+RenderDist)\n\t\t\t\t\tPX = round2(PlayerChar.Position.X/1, Size)\n\t\t\t\t\tPZ = math.clamp(PZ-UpdatedPos.Z, PZ-RenderDist, PZ+RenderDist)\n\t\t\t\t\tPZ = round2(PlayerChar.Position.Z/1, Size)\n\t\t\t\t\tNewVec = Vector3.new(PX, -2.1, PZ)\n\t\t\t\telse\n\t\t\t\t\tNewVec = Vector3.new(round2(UpdatedPos.X-(UpdatedPos.X/1), Size), -2.1, round2(UpdatedPos.Z-(UpdatedPos.Z/1), Size))\n\t\t\t\tend\n\t\t\t\twarn(NewVec)\n\n\t\t\t\t--This -If- May be broken\n\t\t\t\tif LazyChunks~=true then\n\t\t\t\t\tFunc[1].Sensor.Position = UpdatedPos - Func[1].Sensor.Position --Works\n\t\t\t\tend\n\t\t\t\tif Dist >= RenderDist then\n\t\t\t\t\twarn(\"Within Render Distance\")\n\t\t\t\t\tFunc[2]:SendMessage(\"Begin\", ThreadType, NewVec, RenderDist, LazyChunks, PlayerChar.Parent)\n\t\t\t\telse\n\t\t\t\t\tFunc[2]:SendMessage(\"Begin\", ThreadType, NewVec, RenderDist, LazyChunks, PlayerChar.Parent)\n\t\t\t\t\t--warn(\"|:\"..script.Name..\"; \"..Func[1].Name..\" Moved (Distance)\")\n\t\t\t\tend\n\t\t\t\t\n\t\t\t--V2 Thread System\n\t\t\telseif ThreadVersion==2  then\n\t\t\t\t\n\t\t\t\t--Select a random \"GeneralThread\" to gen the chunk blocks\n\t\t\t\tif NewChunkGrid~=nil then\n\t\t\t\t\tfor i, Thread in pairs(Threads) do\n\t\t\t\t\t\tif Thread[1].Type.Value==\"GeneralThread\" then\n\t\t\t\t\t\t\tThread[2]:SendMessage(\"Begin\", \"GeneralThread\", UpdatedPos, RenderDist, LazyChunks, PlayerChar.Parent, NewChunkGrid, \"ChunkNameInputHere\")\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\t--Setting Handle\n\t\t\t\tif HelpingServer~=true then\n\t\t\t\t\tPX = math.clamp(PX-UpdatedPos.X, PX-RenderDist, PX+RenderDist)\n\t\t\t\t\tPX = round2(PlayerChar.Position.X/1, Size)\n\t\t\t\t\tPZ = math.clamp(PZ-UpdatedPos.Z, PZ-RenderDist, PZ+RenderDist)\n\t\t\t\t\tPZ = round2(PlayerChar.Position.Z/1, Size)\n\t\t\t\t\tNewVec = Vector3.new(PX, -2.1, PZ)\n\t\t\t\t\t--warn(NewVec)\n\t\t\t\tend \n\t\t\t\t\n\t\t\t\t--Lazy Chunk Setting: Runs a slower check system, but enforces more perameters(Like Player inversion)\n\t\t\t\tif LazyChunks==true then\n\t\t\t\t\tlocal TMPVal = GetPlayerPos()\n\t\t\t\t\tNewVec = Vector3.new(round2(TMPVal.X+(UpdatedPos.X/1), Size), -2.1, round2(TMPVal.Z+(UpdatedPos.Z/1), Size))\n\t\t\t\t\t--warn(NewVec)\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\t--Update Pos depending on server config+\n\t\t\t\tif HelpingServer~=true and ChunkInvertion==true then\n\t\t\t\t\tFunc[1].Sensor.Position = Vector3.new(round2(NewVec.X+Func[1].Sensor.Position.X, Size), -2.1, round2(NewVec.Z+Func[1].Sensor.Position.Z, Size))\n\t\t\t\telseif HelpingServer==true and ChunkInvertion~=true then\n\t\t\t\t\tFunc[1].Sensor.Position = Vector3.new(round2(UpdatedPos.X+Func[1].Sensor.Position.X, Size), -2.1, round2(UpdatedPos.Z+Func[1].Sensor.Position.Z, Size))\n\t\t\t\telseif HelpingServer~=true and ChunkInvertion~=true then\n\t\t\t\t\tNewVec = UpdatedPos\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\t--Nil Check\n\t\t\t\tif NewVec==nil then\n\t\t\t\t\tNewVec=Vector3.new(0,-2.1,0)\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\t--Snap to grid\n\t\t\t\tNewVec = Vector3.new(round2(NewVec.X, Size), -2.1, round2(NewVec.Z, Size))\n\t\t\t\t\n\t\t\t\t--Send Back to Thread\n\t\t\t\tif Dist >= RenderDist then\n\t\t\t\t\t--warn(\"Within Render Distance\")\n\t\t\t\t\tFunc[2]:SendMessage(\"Begin\", ThreadType, NewVec, RenderDist, LazyChunks, PlayerChar.Parent)\n\t\t\t\telse\n\t\t\t\t\tFunc[2]:SendMessage(\"Begin\", ThreadType, NewVec, RenderDist, LazyChunks, PlayerChar.Parent)\n\t\t\t\t\t--warn(\"|:\"..script.Name..\"; \"..Func[1].Name..\" Moved (Distance)\")\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\tend\n\tend\n\treturn\nend\n\n--Remove all threads and ReCreate new Threads Function\nfunction CreateThreads(ThreadCount, NewVec, RenderDist, LazyChunks, PlayerChar, WasCalledLocally)\n\t\n\tif WasCalledLocally then\n\t\twarn(\"Function Disabled, Re-write the Thread handling as i cant seem to get a good solution for changing thread counts...\")\n\t\t--return\n\tend\n\t\n\t--Clear Threads before Creating\n\tlocal NewTCount = 0\n\tfor i, Obj in pairs(script.Threads:GetChildren()) do\n\t\tlocal Thread = Obj:FindFirstChild(\"Thread\"..i)\n\t\tThread.Name=Thread.Name..\"(Old)\"\n\t\tThread.Enabled=false\n\t\tObj.Parent=script.DisabledThreads\n\t\ttable.remove(Threads, i)\n\t\t--NewTCount+=1\n\tend\n\t\n\tlocal ThreadVersion = \"V1\"\n\t--Create New Threads\n\tlocal CThread = script.Assets:FindFirstChild(\"GridThread\")\n\twhile #Threads < (ThreadCount or 4) do\n\t\t\n\t\t--Create New Thread\n\t\tlocal Thread = CThread:Clone()\n\t\tlocal actor = Instance.new(\"Actor\")\n\t\tThread.Parent = actor --actor\n\t\tThread.Name = \"Thread\"..#Threads+1\n\t\t\n\t\t--Makes 1 thread per 1 GridThread\n\t\tif #Threads+1 > ThreadCount-(ThreadCount/2) then\n\t\t\tThread.Type.Value = \"GeneralThread\" --V1 --(This Thread Gens Terrain From GridThreads)\n\t\t\t\n\t\t\t--Thread.Type.Value = \"LocatorThread\"..ThreadVersion --New system, V2+ (Replaces General Thread, Same function)\n\t\t\t--Then Create New Versions in the base script for threads, this way i can just set all threads to V2, V3 so on\n\t\t\t\n\t\telse\n\t\t\t--V2 Thread: TerrainThreadV2\n\t\t\tThread.Type.Value = \"GridThread\" --V1 (This Thread Gens Grid)\n\t\tend\n\t\t\n\t\t--add to threads index\n\t\tThreads[#Threads+1]={}\n\t\ttable.insert(Threads[#Threads], Thread)\n\t\ttable.insert(Threads[#Threads], actor)\n\t\t\n\t\t--Enable thread\n\t\tactor.Parent=script.Threads\n\t\tThread.Enabled=true\n\t\t\n\t\t\n\t\t--This is a listener for the thread Coms, Removing this will cause Threads to not resbond\n\t\tStartListener(Threads[#Threads])\n\t\twait(0.1)\n\tend\n\twarn(Threads)\n\tfor i, Thread in pairs(Threads) do\n\t\t--Init Thread\n\t\tif Thread[1].Name==\"GridThread\" or Thread[1].Type.Value==\"GridThread\" then\n\t\t\tThread[2]:SendMessage(\"Begin\", Thread[1].Type.Value, NewVec, RenderDist, LazyChunks, PlayerChar)\n\t\tend\n\tend\n\tif WasCalledLocally then\n\t\treturn\n\tend\nend\n\n\n\n\nlocal function SetValLimits(Setting, NewVal, Settings)\n\t--Set Value Limits/Specific Function\n\twarn(Setting)\n\twarn(NewVal)\n\tif Setting==\"ThreadCount\" then\n\t\twarn(\"Acting\")\n\t\tlocal NewVec = GetPlayerPos()\n\t\tif NewVal >= ThreadLimit then\n\t\t\twarn(\"Limit of \"..ThreadLimit..\" has been reached, you can use more threads with a gamepass\")\n\t\telse\n\t\t\tif NewVal ~= #Threads then\n\t\t\t\twarn(\"Resetting & Recreating Threads\")\n\t\t\t\tCreateThreads(NewVal, NewVec, RenderDist, LazyChunks, PlayerChar.Parent, true)\n\t\t\tend\n\t\tend\n\telseif Setting==\"ThreadSpeed\" then\n\t\tif NewVal <= 0.01 then\n\t\t\tNewVal = 0.01\n\t\telseif NewVal >= 2 then\n\t\t\tNewVal = 2\n\t\tend\n\t\twarn(NewVal)\n\t\tNewVal = round2(NewVal, 0.01)\n\t\tNewVal = roundNumber(NewVal, 3)\n\t\twarn(NewVal)\n\t\treturn NewVal\n\telseif Setting==\"HelpingServer\" or Setting==\"ChunkInvertion\" then\n\t\tif script.Settings:FindFirstChild(\"ChunkInvertion\") and Setting==\"HelpingServer\" then\n\t\t\tif script.Settings.ChunkInvertion.Value==true then\n\t\t\t\tNewVal = false\n\t\t\tend\n\t\telseif script.Settings:FindFirstChild(\"ChunkInvertion\") and Setting==\"ChunkInvertion\" then\n\t\t\tif script.Settings.HelpingServer.Value==true then\n\t\t\t\tNewVal = false\n\t\t\tend\n\t\tend\n\t\treturn NewVal\n\tend\n\treturn \nend\n\n--Limits to the Vars and Gamepass limits are applied here\nif HostComs~=nil then\n\tif HostComs.Name==\"HostFunction\" then\n\t\t--Function for buttonService\n\t\tlocal function Com2(SettingName, NewVar, Type)\n\t\t\t\n\t\t\t--Check if requested setting exists\n\t\t\tlocal OldVar\n\t\t\tlocal OutVar\n\t\t\tlocal Suc= pcall(function() warn(SettingName.Name) end)\n\t\t\twarn(Suc)\n\t\t\tif Suc then\n\n\t\t\t\t\n\t\t\t\t--Get setting by name\n\t\t\t\tlocal Setting = script.Settings:FindFirstChild(SettingName.Name)\n\t\t\t\tif Setting~=nil then\n\t\t\t\t\twarn(\"Setting Changed!\")\n\t\t\t\t\tOldVar = SettingName.Value\n\t\t\t\t\tOutVar = NewVar\n\t\t\t\t\t--Set Value\n\t\t\t\t\tif Type==\"IntString\" then\n\t\t\t\t\t\tSetting.Value = NewVar\n\t\t\t\t\telseif Type==\"NumberString\" then\n\t\t\t\t\t\tSetting.Value = tonumber(NewVar)\n\t\t\t\t\telse\n\t\t\t\t\t\tSetting.Value = NewVar\n\t\t\t\t\tend\n\t\t\t\t\tlocal Correction = SetValLimits(SettingName.Name, Setting.Value)\n\t\t\t\t\tif Correction~=nil then\n\t\t\t\t\t\twarn(\"Corrected ThreadSpeed\")\n\t\t\t\t\t\tSettingName.Value = Correction\n\t\t\t\t\t\treturn SettingName, OldVar, Correction, \"Null\"\n\t\t\t\t\tend\n\t\t\t\t\treturn SettingName, OldVar, OutVar, \"Null\"\n\t\t\t\telse\n\t\t\t\t\treturn SettingName, OldVar, NewVar, \"Setting Does not Exist\"\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn false, OldVar, NewVar, \"No Code\"\n\t\tend\n\n\t\t--Listener\n\t\tHostComs.OnInvoke = Com2\n\tend\nend\n\t\n\t\n--this function appears to be unused, could be usefull though\nlocal function Com(Player, Request, Data : \"Setting Name\")\n\tif Player.Name ~= PlayerChar.Parent.Name then\n\t\t--If this doesnt match it means someone is exploiting, Just kick them\n\t\tPlayer:Kick(\"Tempering Detected on \"..PlayerChar.Parent.Name..\", you have not been banned but we have noticed \")\n\t\t\n\tend\n\twarn(Request)\n\twarn(Data)\n\tif Request==true then\n\t\tlocal RVal = script.Settings[Data].Value\n\t\twarn(RVal)\n\t\treturn Request, RVal\n\tend\n\treturn false, \"Failed\"\nend\nscript.Settings.PlayerGui.OnServerInvoke = Com\n\nif actor == nil then\n\twarn(\"Creating Actors\")\n\tCreateThreads(script.Settings.ThreadCount.Value, Vector3.new(0,-2.1,0), RenderDist, LazyChunks, PlayerChar.Parent)\n\t-- exit from the script; the following code will run in each actor\n\t--return\nend\n\n\n\n"},"Parent":"ProjectFolder","CLS":"Script","Children":{"Threads":{"NME":"Threads","Parent":"ThreadManager","Properties":{"Parent":"ThreadManager","Name":"Threads","Archivable":"true"},"Children":[],"CLS":"Folder"},"Assets":{"NME":"Assets","Parent":"ThreadManager","Properties":{"Parent":"ThreadManager","Name":"Assets","Archivable":"true"},"Children":{"GridThread":{"NME":"GridThread","Parent":"Assets","Properties":{"Enabled":"false","LinkedSource":"","Disabled":"true","Parent":"Assets","Name":"GridThread","Archivable":"true","Source":"print(\"Hello world!\")\nlocal Size=20\nlocal Retry=true\nlocal Idle=false\nlocal FrameBuffer=5\nlocal Frame=0\nlocal Debug=false\n\n\n\n--I think a better way to detect when a chunk does not exist is making a sensor 3x bigger than the chunk and a 0.5x Sensor\n--Then if a reading comes in just read the opposing side of the sensor, then if a chunk does not exist there with the small sensor its a good spot \n--(Make sure there is At LEAST 2 in one side of the 3x sensor. otherwise it might make splotching)\n--Also fix the fact the size if fucking broken again\n\n--also need the GUI!!!\n\n\n\nfunction roundNumber(num, numDecimalPlaces)\n\treturn string.format(\"%.\" .. (numDecimalPlaces or 0) .. \"f\", num)\nend\nfunction round2(n, to)\n\treturn math.floor(n/to + 0.5) * to\nend\nlocal function CreatePart(X, Y, Z)\n\tlocal New=game.Workspace.Baseplate:Clone()\n\tNew.Parent=game.Workspace.TempChunks or workspace\n\tNew.Name = \"ChunkSlot\"..math.random(-1270000,1270000)\n\tNew.Position=Vector3.new(X,Y,Z)\n\t--if Debug then warn(\"Target Created\") end\n\tRetry=true\n\treturn New.Name\nend\nlocal function CreateCubit(X, Y, Z, Parent)\n\tlocal New=Instance.new(\"Part\")\n\tNew.Parent=Parent\n\tNew.Name = \"Cubit\"\n\tNew.Size=Vector3.new(1,1,1)\n\tNew.Position=Vector3.new(X,Y,Z)\n\treturn New.Name\nend\n\nlocal Time=os.clock()\nscript.Parent:GetActor():BindToMessage(\"Begin\", function(ThreadType, StartSearchPos, RenderDist, LazyChunks, PlayerChar, NewChunkGrid)\n\t\n\t--Unhalt Thread\n\tIdle=false\n\t\n\t--Setup Sensor\n\tscript.Sensor.Position=StartSearchPos\n\tscript.Sensor.Transparency=0.7\n\t\n\tif true  then\n\telse\n\t\tscript.BigSensor.Position=StartSearchPos\n\t\tscript.BigSensor.Transparency=0.7\n\tend\n\t\n\t--Get Positional Data\n\tlocal X=StartSearchPos.X\n\tlocal Z=StartSearchPos.Z\n\tlocal PX = round2(PlayerChar.HumanoidRootPart.Position.X, Size)\n\tlocal PZ = round2(PlayerChar.HumanoidRootPart.Position.Z, Size)\n\t\n\t--Get Settings\n\tRenderDist=script.Parent.Parent.Parent.Settings.RenderDistance.Value\n\tLazyChunks=script.Parent.Parent.Parent.Settings.LazyChunks.Value\n\tlocal HelpingServer=script.Parent.Parent.Parent.Settings.HelpingServer.Value\n\tlocal ThreadsHelping=script.Parent.Parent.Parent.Settings.HelpingServer.Threads.Value\n\tlocal ThreadSpeed=script.Parent.Parent.Parent.Settings.ThreadSpeed.Value\n\t\n\t--Presetting Stuff\n\tif HelpingServer~=true then\n\t\tX = math.clamp(X, PX-RenderDist, PX+RenderDist)\n\t\tZ = math.clamp(Z, PZ-RenderDist, PZ+RenderDist)\n\tend\n\tif RenderDist==nil then\n\t\tRenderDist=60\n\tend\n\n\tif script.Type.Value~=ThreadType then\n\t\twarn(script.Type.Value..\"~=\"..ThreadType)\n\tend\n\t\n\t\n\t\n\t--The Code managing thread work\n\tif ThreadType==\"GridThread\" then --Gridthreads are the old way of generating the Grid for terrain to be generated on(GeneralThread)\n\t\t--if Debug then warn(\"/:\"..script.Name..\";\"..\" Thread Starting\") end\n\t\t--warn(\"/:\"..script.Name..\";\"..\" Thread Starting\")\n\t\tlocal function Run()\n\t\t\tPX = round2(PlayerChar.HumanoidRootPart.Position.X, Size)\n\t\t\tPZ = round2(PlayerChar.HumanoidRootPart.Position.Z, Size)\n\t\t\tRenderDist=script.Parent.Parent.Parent.Settings.RenderDistance.Value\n\t\t\tLazyChunks=script.Parent.Parent.Parent.Settings.LazyChunks.Value\n\t\t\tHelpingServer=script.Parent.Parent.Parent.Settings.HelpingServer.Value\n\t\t\tThreadsHelping=script.Parent.Parent.Parent.Settings.HelpingServer.Threads.Value\n\t\t\tThreadSpeed=script.Parent.Parent.Parent.Settings.ThreadSpeed.Value\n\t\t\t\n\t\t\tlocal Table=script.Sensor:GetTouchingParts()\n\t\t\tfor i, Obj in pairs(Table) do\n\n\t\t\t\t--Visual Highlighter\n\t\t\t\tif script.Parent.Parent.Parent.Settings.VisualDebug.Value==true then\n\t\t\t\t\tscript.Sensor.SelectionBox.Adornee=Obj\n\t\t\t\t\tscript.Sensor.SelectionBox.Visible=script.Parent.Parent.Parent.Settings.VisualDebug.Value\n\t\t\t\telseif script.Parent.Parent.Parent.Settings.VisualDebug.Value==false and script.Sensor.SelectionBox.Visible==true then\n\t\t\t\t\tscript.Sensor.SelectionBox.Visible=false\n\t\t\t\t\tscript.BigSensor.SelectionBox.Visible=false\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\t--if Debug then warn(typeof(Obj)) end\n\t\t\t\tif typeof(Obj)==\"Instance\" then\n\t\t\t\t\tif Debug then warn(\"A\") end\n\t\t\t\t\tlocal M=math.random(1,4)\n\t\t\t\t\tif M==1 then\n\t\t\t\t\t\tZ=Z+Size\n\t\t\t\t\telseif M==2 then\n\t\t\t\t\t\tX=X+Size\n\t\t\t\t\telseif M==3 then\n\t\t\t\t\t\tZ=Z-Size\n\t\t\t\t\telseif M==4 then\n\t\t\t\t\t\tX=X-Size\n\t\t\t\t\telse\n\t\t\t\t\tend\n\t\t\t\t\tRetry=true\n\t\t\t\tend\n\t\t\t\tif HelpingServer~=true then\n\t\t\t\t\tX = math.clamp(X, PX-RenderDist, PX+RenderDist)\n\t\t\t\t\tZ = math.clamp(Z, PZ-RenderDist, PZ+RenderDist)\n\t\t\t\tend\n\t\t\t\tif Retry then\n\t\t\t\t\t--Idle=true\n\t\t\t\t\t--script.Function:Invoke(ThreadType, script.Name, Vector3.new(StartSearchPos.X+X, StartSearchPos.Y, StartSearchPos.Z+Z))\n\t\t\t\t\t--script.Sensor.Position=Vector3.new(StartSearchPos.X+X, StartSearchPos.Y, StartSearchPos.Z+Z)\n\t\t\t\t\tscript.Sensor.Position=Vector3.new(X, StartSearchPos.Y, Z)\n\t\t\t\tend\n\t\t\tend\n\t\t\tif #Table==0 then\n\t\t\t\tRetry=false\n\t\t\telse\n\t\t\t\tRetry=true\n\t\t\tend\t\n\t\t\treturn\n\t\tend\n\n\t\tif os.clock()-Time <= 0.75 then\n\t\t\twarn(\"Time Since Last Call= \"..os.clock()-Time)\n\t\tend\n\t\tTime=os.clock()\n\n\t\tif Retry then\n\t\t\tPX = round2(PlayerChar.HumanoidRootPart.Position.X, Size)\n\t\t\tPZ = round2(PlayerChar.HumanoidRootPart.Position.Z, Size)\n\t\t\tRenderDist=script.Parent.Parent.Parent.Settings.RenderDistance.Value\n\t\t\tLazyChunks=script.Parent.Parent.Parent.Settings.LazyChunks.Value\n\t\t\tHelpingServer=script.Parent.Parent.Parent.Settings.HelpingServer.Value\n\t\t\tThreadsHelping=script.Parent.Parent.Parent.Settings.HelpingServer.Threads.Value\n\t\t\tThreadSpeed=script.Parent.Parent.Parent.Settings.ThreadSpeed.Value\n\t\t\t\n\t\t\twhile Retry do\n\t\t\t\tRun()\n\t\t\t\tgame[\"Run Service\"].Heartbeat:Wait()\n\t\t\t\tif ThreadSpeed~=nil then\n\t\t\t\t\tif ThreadSpeed >= 0.02 then\n\t\t\t\t\t\twait(ThreadSpeed)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\tif Retry==false then\n\t\t\t\t--if Debug then warn(\"Target Made\") end\n\t\t\t\tlocal NewPart = CreatePart(X, script.Sensor.Position.Y, Z)\n\t\t\t\tif Retry==true then\n\t\t\t\t\tif Debug then warn(\"/:\"..script.Name..\";\"..\" Thread Now Idle\") end\n\t\t\t\t\tgame[\"Run Service\"].Heartbeat:Wait()\n\t\t\t\t\tif ThreadSpeed~=nil then\n\t\t\t\t\t\tif ThreadSpeed >= 0.02 then\n\t\t\t\t\t\t\twait(ThreadSpeed)\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tscript.Function:Invoke(ThreadType, script.Name, Vector3.new(X, script.Sensor.Position.Y, Z), NewPart)\n\t\t\t\t\tif LazyChunks~=true then\n\t\t\t\t\telse\n\t\t\t\t\t\tscript.Sensor.Position=Vector3.new(PX, StartSearchPos.Y, PZ)\n\t\t\t\t\t\tIdle=true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif Debug then warn(\"/:\"..script.Name..\";\"..\" Thread Missing Target/Error (Now Idling)\") end\n\t\t\t\tscript.Function:Invoke(ThreadType, script.Name, Vector3.new(X, script.Sensor.Position.Y, Z))\n\t\t\t\tIdle=true\n\t\t\tend\n\t\telse\n\t\t\tIdle=true\n\t\tend\n\t\twhile Idle do\n\t\t\tif Frame >= FrameBuffer then\n\t\t\t\tFrame=0\n\t\t\t\tif Idle then\n\t\t\t\t\tif Debug then warn(\"/:\"..script.Name..\";\"..\" Thread Idle\") end\n\t\t\t\t\tif HelpingServer~=true then\n\t\t\t\t\t\tX = math.clamp(X, PX-RenderDist, PX+RenderDist)\n\t\t\t\t\t\tZ = math.clamp(Z, PZ-RenderDist, PZ+RenderDist)\n\t\t\t\t\tend\n\t\t\t\t\tscript.Function:Invoke(ThreadType, script.Name, Vector3.new(X, script.Sensor.Position.Y, Z))\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tFrame+=1\n\t\t\tend\n\t\t\tif ThreadSpeed==nil then\n\t\t\t\tThreadSpeed=0.01\n\t\t\tend\n\t\t\twait(ThreadSpeed)\n\t\tend\n\t\t\n\t\t\n\t\t\n\t\t\n\telseif ThreadType==\"GeneralThread\" then --Creates New terrain from a gridThread \n\t\t--warn(ThreadType)\n\t\t--warn(\"General Thread Working\")\n\n\t\t--Vars in: function(ThreadType, StartSearchPos, RenderDist, LazyChunks, PlayerChar, NewChunkGrid)\n\n\n\t\t--get settings menu first!\n\n\t\t--This part is the profiler, The pipeline to this Threadmanager is a bit used but has room. so if the script and threads can work somewhat smooth then\n\t\t--This part of the profiler will make the y layers random in height and round out harsh corners,\n\n\t\t--then it needs to work on material sensing and blending (Blending random corners and edges as well as ores and mats. making a natural appearance)\n\n\t\t--Then localization needs to be done then optimzations\n\n\t\tif os.clock()-Time <= 0.75 then\n\t\t\t--warn(os.clock()-Time)\n\t\tend\n\t\tTime=os.clock()\n\t\tlocal TerrainGrid = game.Workspace.TempChunks[NewChunkGrid]\n\t\tif TerrainGrid~=nil then\n\t\t\t--Create 20x20 Cube of 1x1x1 cubes with for loops here\n\t\t\t--[[for Y=0, (TerrainGrid.Size.Y), 1  do\n\t\t\t\t--warn(\"YLayer=\"..Y)\n\t\t\t\tCreateCubit(X, Y, Z, TerrainGrid)\n\t\t\t\tfor X=0, (Size), 1  do\n\t\t\t\t\t--warn(\"X=\"..X)\n\t\t\t\t\tCreateCubit(X, Y, Z, TerrainGrid)\n\t\t\t\t\twait(0.001)\n\t\t\t\t\tfor Z=0, (Size), 1  do\n\t\t\t\t\t\t--warn(\"Z=\"..Z)\n\t\t\t\t\t\tCreateCubit(X, Y, Z, TerrainGrid)\n\t\t\t\t\t\t--wait(0.001)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t\n\t\t\tend]]\n\n\n\n\t\t\tlocal NewVec = CFrame.new(TerrainGrid.CFrame.X, -4.1, TerrainGrid.CFrame.Z)\n\t\t\tlocal TerServic = game.Workspace.Terrain:FillBlock(NewVec, TerrainGrid.Size, Enum.Material.Grass)\n\t\telse\n\t\t\twarn(\"Not Valid Grid\")\n\t\tend\n\n\telseif ThreadType == \"TerrainThreadV2\" then\n\t\t--warn(ThreadType)\n\t\t--warn(\"General Thread Working\")\n\n\t\t--Vars in: function(ThreadType, StartSearchPos, RenderDist, LazyChunks, PlayerChar, NewChunkGrid)\n\t\t\n\t\t--Get Setting Data and Prerequired Data\n\t\tPX = round2(PlayerChar.HumanoidRootPart.Position.X, Size)\n\t\tPZ = round2(PlayerChar.HumanoidRootPart.Position.Z, Size)\n\t\tRenderDist=script.Parent.Parent.Parent.Settings.RenderDistance.Value\n\t\tLazyChunks=script.Parent.Parent.Parent.Settings.LazyChunks.Value\n\t\tHelpingServer=script.Parent.Parent.Parent.Settings.HelpingServer.Value\n\t\tThreadsHelping=script.Parent.Parent.Parent.Settings.HelpingServer.Threads.Value\n\t\tThreadSpeed=script.Parent.Parent.Parent.Settings.ThreadSpeed.Value\n\t\t\n\t\t--Get Sensor Parts\n\t\tlocal SmSensor=script.Sensor:GetTouchingParts()\n\t\tlocal BigSensor=script.BigSensor:GetTouchingParts()\n\t\tlocal SelectionB1 = script.Sensor.SelectionBox\n\t\t--local ActiveSelB1 = script.Sensor.Active\n\t\tlocal SelectionB2 = script.BigSensor.SelectionBox\n\t\tlocal ActiveSelB2 = script.BigSensor.Active\n\t\t\n\t\t--Set HighLights\n\t\tfor i, Obj in pairs(SmSensor) do\n\t\t\t--Visual Highlighter\n\t\t\tif script.Parent.Parent.Parent.Settings.VisualDebug.Value==true then\n\t\t\t\tSelectionB1.Adornee=Obj\n\t\t\t\tSelectionB1.Visible=script.Parent.Parent.Parent.Settings.VisualDebug.Value\n\t\t\telseif script.Parent.Parent.Parent.Settings.VisualDebug.Value==false and SelectionB1.Visible==true then\n\t\t\t\tSelectionB1.Visible=false\n\t\t\tend\n\t\tend\n\t\tfor i, Obj in pairs(BigSensor) do\n\t\t\t\n\t\t\t--Add New Selection boxs if needed\n\t\t\tif #ActiveSelB2:GetChildren() <= #BigSensor  then\n\t\t\t\tlocal Missing = #BigSensor - #ActiveSelB2:GetChildren()\n\t\t\t\tfor i=0, Missing, 1  do\n\t\t\t\t\tlocal SB = SelectionB2:Clone()\n\t\t\t\t\tSB.Parent = ActiveSelB2\n\t\t\t\t\tSB.Adornee = BigSensor\n\t\t\t\t\tSB.Visible = false\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\t--Set vis and Adornee\n\t\t\tfor i2, Obj2 in pairs(ActiveSelB2:GetChildren()) do\n\t\t\t\tif script.Parent.Parent.Parent.Settings.VisualDebug.Value==true then\n\t\t\t\t\tObj2.Visible = true\n\t\t\t\t\tObj2.Adornee = Obj\n\t\t\t\telseif script.Parent.Parent.Parent.Settings.VisualDebug.Value==false and Obj2.Visible==true then\n\t\t\t\t\tObj2.Visible=false\n\t\t\t\t\tObj2.Adornee = BigSensor\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\tend\n\t\t\n\t\t--Position Changes/Limits\n\t\tif HelpingServer~=true then\n\t\t\tX = math.clamp(X, PX-RenderDist, PX+RenderDist)\n\t\t\tZ = math.clamp(Z, PZ-RenderDist, PZ+RenderDist)\n\t\tend\n\t\t\n\t\t\n\t\t--Fill Space in SmSensor\n\t\tlocal NewPart = CreatePart(X, script.Sensor.Position.Y, Z)\n\t\n\t\t--Fill Space in BigSensor(Disabled)\n\t\t--Needs to be worked on, its suppoised to fill EMPTY spaces in a grid sensor, im filling spaces that already exist...\n\t\t--[[local NewParts = {}\n\t\tfor i, Obj in pairs(BigSensor) do\n\t\t\tlocal NP = CreatePart(Obj.X, script.Sensor.Position.Y, Obj.Z)\n\t\t\tNewParts[NP.Name] = NP \n\t\tend]]\n\t\t\n\t\t--Update Pos's\n\t\tscript.Sensor.Position=Vector3.new(X, StartSearchPos.Y, Z)\n\t\tscript.BigSensor.Position=Vector3.new(X, StartSearchPos.Y, Z)\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tif os.clock()-Time <= 0.75 then\n\t\t\twarn(\"Time Since Last Call= \"..os.clock()-Time)\n\t\tend\n\t\tTime=os.clock()\n\t\tscript.Function:Invoke(ThreadType, script.Name, Vector3.new(X, script.Sensor.Position.Y, Z), NewPart)\n\tend\nend)"},"Children":{"Function":{"NME":"Function","Parent":"GridThread","Properties":{"Parent":"GridThread","Name":"Function","Archivable":"true"},"Children":[],"CLS":"BindableFunction"},"Sensor":{"NME":"Sensor","Parent":"GridThread","Properties":{"CFrame":"0, -0.899999619, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1","RightSurface":"Enum.SurfaceType.Smooth","AssemblyAngularVelocity":"0, 0, 0","BottomSurface":"Enum.SurfaceType.Smooth","CanCollide":"true","RootPriority":"0","AssemblyLinearVelocity":"0, 0, 0","Transparency":"1","Orientation":"0, 0, 0","MaterialVariant":"","Reflectance":"0","Color":"0.121569, 0.501961, 0.113725","Massless":"false","CollisionGroupId":"0","Parent":"GridThread","Locked":"false","Material":"Enum.Material.Plastic","Archivable":"true","Size":"10, 1, 10","Name":"Sensor","BackSurface":"Enum.SurfaceType.Smooth","TopSurface":"Enum.SurfaceType.Smooth","CustomPhysicalProperties":"nil","CanQuery":"true","Velocity":"0, 0, 0","CanTouch":"true","CastShadow":"true","Rotation":"0, 0, 0","Anchored":"true","BrickColor":"Forest green","Position":"0, -0.8999996185302734, 0","LeftSurface":"Enum.SurfaceType.Smooth","FrontSurface":"Enum.SurfaceType.Smooth","Shape":"Enum.PartType.Block","PivotOffset":"0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1"},"Children":{"SelectionBox":{"NME":"SelectionBox","Parent":"Sensor","Properties":{"Visible":"false","LineThickness":"0.30000001192092896","Color":"Forest green","SurfaceTransparency":"0.5","Transparency":"0","Color3":"0.121569, 0.501961, 0.113725","Parent":"Sensor","Name":"SelectionBox","Archivable":"true","SurfaceColor3":"0.67451, 0, 0.0117647","Adornee":"Baseplate"},"Children":[],"CLS":"SelectionBox"},"Active":{"NME":"Active","Parent":"Sensor","Properties":{"Parent":"Sensor","Name":"Active","Archivable":"true"},"Children":[],"CLS":"Folder"}},"CLS":"Part"},"Type":{"NME":"Type","Parent":"GridThread","Properties":{"Value":"GridThread","Parent":"GridThread","Archivable":"true","Name":"Type"},"Children":[],"CLS":"StringValue"},"BigSensor":{"NME":"BigSensor","Parent":"GridThread","Properties":{"CFrame":"0, -0.899999619, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1","RightSurface":"Enum.SurfaceType.Smooth","AssemblyAngularVelocity":"0, 0, 0","BottomSurface":"Enum.SurfaceType.Smooth","CanCollide":"true","RootPriority":"0","AssemblyLinearVelocity":"0, 0, 0","Transparency":"1","Orientation":"0, 0, 0","MaterialVariant":"","Reflectance":"0","Color":"0.121569, 0.501961, 0.113725","Massless":"false","CollisionGroupId":"0","Parent":"GridThread","Locked":"false","Material":"Enum.Material.Plastic","Archivable":"true","Size":"50, 1, 50","Name":"BigSensor","BackSurface":"Enum.SurfaceType.Smooth","TopSurface":"Enum.SurfaceType.Smooth","CustomPhysicalProperties":"nil","CanQuery":"true","Velocity":"0, 0, 0","CanTouch":"true","CastShadow":"true","Rotation":"0, 0, 0","Anchored":"true","BrickColor":"Forest green","Position":"0, -0.8999996185302734, 0","LeftSurface":"Enum.SurfaceType.Smooth","FrontSurface":"Enum.SurfaceType.Smooth","Shape":"Enum.PartType.Block","PivotOffset":"0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1"},"Children":{"SelectionBox":{"NME":"SelectionBox","Parent":"BigSensor","Properties":{"Visible":"false","LineThickness":"0.30000001192092896","Color":"Bright bluish green","SurfaceTransparency":"0.5","Transparency":"0","Color3":"0, 0.560784, 0.611765","Parent":"BigSensor","Name":"SelectionBox","Archivable":"true","SurfaceColor3":"0.67451, 0, 0.0117647","Adornee":"BigSensor"},"Children":[],"CLS":"SelectionBox"},"Active":{"NME":"Active","Parent":"BigSensor","Properties":{"Parent":"BigSensor","Name":"Active","Archivable":"true"},"Children":[],"CLS":"Folder"}},"CLS":"Part"}},"CLS":"Script"}},"CLS":"Folder"},"Settings":{"NME":"Settings","Parent":"ThreadManager","Properties":{"Parent":"ThreadManager","Name":"Settings","Archivable":"true"},"Children":{"ThreadCount":{"NME":"ThreadCount","Parent":"Settings","Properties":{"Value":"6","Parent":"Settings","Archivable":"true","Name":"ThreadCount"},"Children":[],"CLS":"IntValue"},"LazyChunks":{"NME":"LazyChunks","Parent":"Settings","Properties":{"Value":"true","Parent":"Settings","Archivable":"true","Name":"LazyChunks"},"Children":[],"CLS":"BoolValue"},"ThreadSpeed":{"NME":"ThreadSpeed","Parent":"Settings","Properties":{"Value":"0.01","Parent":"Settings","Archivable":"true","Name":"ThreadSpeed"},"Children":[],"CLS":"NumberValue"},"VisualDebug":{"NME":"VisualDebug","Parent":"Settings","Properties":{"Value":"true","Parent":"Settings","Archivable":"true","Name":"VisualDebug"},"Children":[],"CLS":"BoolValue"},"ChunkInvertion":{"NME":"ChunkInvertion","Parent":"Settings","Properties":{"Value":"true","Parent":"Settings","Archivable":"true","Name":"ChunkInvertion"},"Children":[],"CLS":"BoolValue"},"HelpingServer":{"NME":"HelpingServer","Parent":"Settings","Properties":{"Value":"false","Parent":"Settings","Archivable":"true","Name":"HelpingServer"},"Children":{"Threads":{"NME":"Threads","Parent":"HelpingServer","Properties":{"Value":"1","Parent":"HelpingServer","Archivable":"true","Name":"Threads"},"Children":[],"CLS":"NumberValue"}},"CLS":"BoolValue"},"RenderDistance":{"NME":"RenderDistance","Parent":"Settings","Properties":{"Value":"80","Parent":"Settings","Archivable":"true","Name":"RenderDistance"},"Children":[],"CLS":"IntValue"},"PlayerGui":{"NME":"PlayerGui","Parent":"Settings","Properties":{"Parent":"Settings","Name":"PlayerGui","Archivable":"true"},"Children":[],"CLS":"RemoteFunction"}},"CLS":"Folder"},"ButtonService":{"NME":"ButtonService","Parent":"ThreadManager","Properties":{"Enabled":"true","LinkedSource":"","Disabled":"false","Parent":"ThreadManager","Name":"ButtonService","Archivable":"true","Source":"--Setting Menu Pipeline\nlocal DataEv = script.Data\nlocal PlayerWS = script.Parent.Parent\nlocal Player = game.Players:FindFirstChild(PlayerWS.Name)\nlocal Players = {}\nfor i, Obj in game.Players:GetChildren() do\n\tPlayers[Obj.Name]=Obj\nend\nif Players[PlayerWS.Name]~=nil then\n\tPlayer = game.Players[PlayerWS.Name]\n\twarn(\"Found Player\")\nelse\n\twarn(\"Error finding Player\")\n\treturn\nend\nlocal Player = game.Players[PlayerWS.Name]\nlocal Humanoid = script.Parent.Parent:WaitForChild(\"HumanoidRootPart\")\nlocal HostComs = script:FindFirstChild(\"HostFunction\")\nlocal HTTP = game:GetService(\"HttpService\")\nwarn(\"Starting\")\nlocal ColorIndex={\n\t[\"OffColor\"]=Color3.fromRGB(150, 0, 2),\n\t[\"OnColor\"]=Color3.fromRGB(15, 150, 0),\n}\n\n--Setup Settings Icon\n\n\n\n--Error System\nlocal ErrorLog = script.Parent:FindFirstChild(\"ErrorLog\")\nlocal ErrorLogs = {} --Store errors here and append them to the folder in string vars with 1m char limits, so we can save em in batches\n--Also consider sending these error log batches to a server script(Or just save them here as this is a Serverscript)\nlocal function LogError(ErCode : \"ErrorCode, Format=0000:(Severity, Interaction, Id1, Id2)\", ErMSG : \"Error MSG\")\n\tErrorLogs[(#ErrorLogs+1)] = {\n\t\t[\"Count\"]=(#ErrorLogs),\n\t\t[\"ErMSG\"]=ErMSG,\n\t\t[\"ErCode\"]=ErCode,\n\t}\n\tlocal Str = Instance.new(\"StringValue\")\n\tStr.Name = ErrorLogs[(#ErrorLogs)][\"Count\"]\n\tStr.Value =HTTP:JSONEncode(ErrorLogs[(#ErrorLogs)])\n\tStr.Parent=ErrorLog\n\t\n\t--Also add dataStore, however use batch method also when server closing\n\twarn(\"[\"..(#ErrorLogs)..\"]\"..ErCode..\"|\"..ErMSG)\n\treturn ErCode..\"|\"..ErMSG\nend\n\n\n\nif DataEv~=nil then\n\tif PlayerWS==nil then\n\t\tPlayerWS = script.Parent\n\t\tPlayer = game.Players[PlayerWS.Name]\n\tend\n\tif Humanoid==nil then\n\t\tHumanoid = script.Parent:WaitForChild(\"HumanoidRootPart\")\n\t\tif Humanoid.Name~=\"HumanoidRootPart\" then\n\t\t\twarn(\"Error\")\n\t\t\tgame.Players[PlayerWS.Name]:Kick(\"Error locating player\")\n\t\telse\n\t\t\tPlayer = game.Players[PlayerWS.Name]\n\t\tend\n\tend\n\twarn(\"Initilized With: \"..Player.UserId..\"|\"..PlayerWS.Name)\n\tDataEv.OnServerEvent:Connect(function(Plr, Data)\n\t\tlocal function ButtonCallBack()--Fire this to Re-enable the button that was pressed\n\t\t\tlocal DP={ [\"Callback\"]={ --Assign the callback for later\n\t\t\t\t--[\"Color\"]=Color3.new(255,255,255),\n\t\t\t\t[\"Clickable\"]=true,\n\t\t\t\t[\"ButtonName\"]=Data[\"ServerData\"][\"Callback\"]\n\t\t\t}\n\t\t\t}\n\n\t\t\t--the Checks we want done before the API Call, if return is true then API call is allowed\n\t\t\tif Data[\"ServerData\"][\"ToggleSetting\"]==\"\" then\n\t\t\t\twarn(\"No Valid Data!\")\n\t\t\t\t--DataEv:FireClient(Plr, DP) --Re-enable Button(Fire Callback)\n\t\t\t\treturn false, DP, \"No Valid Data!\"\n\t\t\tend\n\n\t\t\t--Finish and return if no issues\n\t\t\t--DataEv:FireClient(Plr, DP) --Re-enable Button(Fire Callback)\n\t\t\treturn true, DP, \"Null\"\n\t\tend\n\t\t\n\t\tif Plr.UserId==Player.UserId then\n\t\t\twarn(Data)\n\t\t\t--Deal with Inline Player data fetching, so we can make 2 inline calls/functions. \n\t\t\tif table.find(Data, \"PlayerData\") then--Inline Function 1\n\t\t\t\tif Data[\"PlayerData\"][\"Request\"]==\"Test\" then\n\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\t--Inline Function 2\n\t\t\tif Data[\"ServerData\"] then\n\t\t\t\tif Data[\"ServerData\"][\"Callback\"] then\n\t\t\t\t\t\n\t\t\t\t\t--Setup Callback,  Format:(ServerCheckPass, Datapacket, ErMSG)\n\t\t\t\t\tpcall(function() warn(\"Creating Callback for: \"..Data[\"ServerData\"][\"Callback\"]) end)\n\t\t\t\t\tlocal CanCall, DP, ER = ButtonCallBack()--Create Callback\n\t\t\t\t\tpcall(function() warn(\"Created Callback for: \"..DP[\"Callback\"][\"ButtonName\"]) end)\n\t\t\t\t\t\n\t\t\t\t\tLogError(\"#0900\", ER)\n\t\t\t\t\t--Add Com network for the host script to connect to, as this buttonService is just dealing with the basics\n\t\t\t\t\t--If we need to add function we are gonna have to call a function For calling data to this script:\n\t\t\t\t\t--MY GOAL: I need to request Settings data from the host script while doing so make it into a service for other shit\n\t\t\t\t\t--so i dont have to do this 80 times\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t--Get setting Data\n\t\t\t\t\tlocal BName=DP[\"Callback\"][\"ButtonName\"]\n\t\t\t\t\tlocal SettingName, State, NewState, ErMSG, ButtonData\n\t\t\t\t\tlocal SettingData, SettingState, SettingType\n\t\t\t\t\t\n\t\t\t\t\t--Get the Setting Data from Host(make sure to test this as a service later down the line!! )\n\t\t\t\t\tif PlayerWS:FindFirstChild(\"ThreadManager\") then\n\t\t\t\t\t\tfor i, Obj in PlayerWS:FindFirstChild(\"ThreadManager\"):FindFirstChild(\"Settings\"):GetChildren() do\n\t\t\t\t\t\t\tif Obj.Name==BName then\n\t\t\t\t\t\t\t\tSettingData=Obj\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\twarn(SettingData.Value)\n\t\t\t\t\t--Set n Check: Value and type\n\t\t\t\t\tif SettingData~=nil then\n\t\t\t\t\t\tif Data[\"ServerData\"][\"Type\"]==\"NumberString\" then\n\t\t\t\t\t\t\tSettingState=Data[\"ServerData\"][\"Text\"]\n\t\t\t\t\t\telseif Data[\"ServerData\"][\"Type\"]==\"IntString\" then\n\t\t\t\t\t\t\tSettingState=Data[\"ServerData\"][\"Text\"]\n\t\t\t\t\t\telseif Data[\"ServerData\"][\"Type\"]==\"TextString\" then\n\t\t\t\t\t\t\tSettingState=Data[\"ServerData\"][\"Text\"]\n\t\t\t\t\t\telseif Data[\"ServerData\"][\"Type\"]==\"Bool\" then\n\t\t\t\t\t\t\tSettingState=not SettingData.Value\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tSettingState=not SettingData.Value\n\t\t\t\t\t\tend\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t--pcall(function() \n\t\t\t\t\t\t--SettingState=SettingData.Value\n\t\t\t\t\t\tSettingType=tostring(Data[\"ServerData\"][\"Type\"])\n\t\t\t\t\t\t--end)\n\t\t\t\t\t\tif SettingType==nil or SettingState==nil then\n\t\t\t\t\t\t\tCanCall=false\n\t\t\t\t\t\t\tER=LogError(\"#3112\", \"Setting Type/State Missing\")\n\t\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\tER=LogError(\"#3113\", \"Setting Data Missing\")\n\t\t\t\t\t\tCanCall=false\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t--Set and Get new Setting Data here\n\t\t\t\t\tif ER==\"Null\" then\n\t\t\t\t\t\twarn(\"Calling Main Script\")\n\t\t\t\t\t\tSettingName, State, NewState, ErMSG, ButtonData = HostComs:Invoke(SettingData, SettingState, SettingType)\n\t\t\t\t\t\twarn(\"Results:\")\n\t\t\t\t\t\twarn(SettingName)\n\t\t\t\t\t\twarn(State)\n\t\t\t\t\t\twarn(NewState)\n\t\t\t\t\t\twarn(ErMSG)\n\t\t\t\t\t\tLogError(\"#0901\", ErMSG)\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\t--Add ButtonData to Callback data just incase the host wants to forceval as well\n\t\t\t\t\tif ButtonData~=nil then\n\t\t\t\t\t\tpcall(function()\n\t\t\t\t\t\t\tfor\ti, Obj in ButtonData do\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend)\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t--Manage Color For the Toggle buttons, Text Inputs dont need color changing\n\t\t\t\t\tif NewState==true then\n\t\t\t\t\t\tDP[\"Callback\"][\"Color\"]=ColorIndex[\"OnColor\"]\n\t\t\t\t\t\tDP[\"Callback\"][\"ForceVal\"]=\"Enabled\"\n\t\t\t\t\telseif NewState==false then\n\t\t\t\t\t\tDP[\"Callback\"][\"Color\"]=ColorIndex[\"OffColor\"]\n\t\t\t\t\t\tDP[\"Callback\"][\"ForceVal\"]=\"Disabled\"\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t--if True all server checks passed, then run this\n\t\t\t\t\t--Add Setting Limitations, and such above in ButtonCallBack Fucntion, However we can also check here if needed, ~ \n\t\t\t\t\t--~by setting cancall False\n\t\t\t\t\n\t\t\t\t\t--Use this section as a wrapper/Handler, This has been replaced with the stuff above. \n\t\t\t\t\t--Or use this as a gate for futher safecode\n\t\t\t\t\tif CanCall==true and ErMSG==\"Null\" then\n\t\t\t\t\t\t--run Our code here, Server checks are in button callback function,\n\t\t\t\t\t\t--that or we can just prevent firing here as well similar to above(Or adding flags to the DP)\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tDataEv:FireClient(Plr, DP) --Re-enable Button(Fire Callback)\n\t\t\t\t\t\twarn(\"Fired Callback, Data Good!\")\n\t\t\t\t\t\treturn \"Not Setup Yet, Data Good!\"\n\t\t\t\t\telse\t--if Server Check Fails then Warn and move on with returning the packet\n\t\t\t\t\t\tif ErMSG~=nil then\n\t\t\t\t\t\t\tER=LogError(\"#2012\", \"API was called but failed\")\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tER=LogError(\"#6011\", \"Data for API Call was NIL\")\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif ER~=\"Null\" and ER~=nil then\n\t\t\t\t\t\t\tLogError(\"#2022\", \"API not called: \"..ER)\n\t\t\t\t\t\telseif ER==nil then\n\t\t\t\t\t\t\tER=LogError(\"#6022\", \"Data for API Prep was NIL.\")\n\t\t\t\t\t\tend\n\t\t\t\t\t\tDataEv:FireClient(Plr, DP) --Re-enable Button(Fire Callback)\n\t\t\t\t\t\treturn ER\n\t\t\t\t\tend\n\n\t\t\t\telse\n\t\t\t\t\t--Fail condition fires back the data as is\n\t\t\t\t\tDataEv:FireClient(Plr, Data)\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t--Fail condition fires back the data as is\n\t\t\t\tDataEv:FireClient(Plr, Data)\n\t\t\tend\n\t\telse\n\t\t\t--Will be usless soon \n\t\t\twarn(\"Player Mismatch, Attempted Exploit from \"..Plr.UserId..\" Trying to Exploit \"..Player.UserId)\n\t\tend\n\tend)\nend\n\n\n"},"Children":{"Data":{"NME":"Data","Parent":"ButtonService","Properties":{"Parent":"ButtonService","Name":"Data","Archivable":"true"},"Children":[],"CLS":"RemoteEvent"},"HostFunction":{"NME":"HostFunction","Parent":"ButtonService","Properties":{"Parent":"ButtonService","Name":"HostFunction","Archivable":"true"},"Children":[],"CLS":"BindableFunction"}},"CLS":"Script"},"Dest":{"NME":"Dest","Parent":"ThreadManager","Properties":{"Value":"StarterCharacterScripts","Parent":"ThreadManager","Archivable":"true","Name":"Dest"},"Children":[],"CLS":"StringValue"},"DisabledThreads":{"NME":"DisabledThreads","Parent":"ThreadManager","Properties":{"Parent":"ThreadManager","Name":"DisabledThreads","Archivable":"true"},"Children":[],"CLS":"Folder"},"ErrorLog":{"NME":"ErrorLog","Parent":"ThreadManager","Properties":{"Parent":"ThreadManager","Name":"ErrorLog","Archivable":"true"},"Children":[],"CLS":"Folder"}},"PackageInfo":{"PackageNME":"ThreadManager","PackageDESC":"No Desc information Set!"}},"ScreenGui":{"DestinationParent":"StarterGui","NME":"ScreenGui","Properties":{"Enabled":"true","AutoLocalize":"true","ResetOnSpawn":"true","IgnoreGuiInset":"true","Name":"ScreenGui","DisplayOrder":"0","Parent":"ProjectFolder","RootLocalizationTable":"nil","Archivable":"true","ZIndexBehavior":"Enum.ZIndexBehavior.Sibling"},"Parent":"ProjectFolder","CLS":"ScreenGui","Children":{"Controller":{"NME":"Controller","Parent":"ScreenGui","Properties":{"Enabled":"true","LinkedSource":"","Disabled":"false","Parent":"ScreenGui","Name":"Controller","Archivable":"true","Source":"\nlocal Player = game.Players.LocalPlayer\nlocal PlayerWS = game.Workspace:WaitForChild(Player.Name)\n\nlocal Humanoid = PlayerWS:WaitForChild(\"HumanoidRootPart\")\nlocal ServerSide=PlayerWS:WaitForChild(\"ThreadManager\"):FindFirstChild(\"ButtonService\")\n--local ServerSide = PlayerWS:WaitForChild(\"Manager\")\nlocal DataEv = ServerSide:WaitForChild(\"Data\")\nlocal HTTP = game:GetService(\"HttpService\")\nlocal ServiceEvent\nlocal ServerSettings\nlocal Settings={}\n\n\nif ServerSide~=nil then\n\t--Set Vars\n\tServiceEvent = ServerSide.Parent.Settings:FindFirstChild(\"PlayerGui\")\n\tServerSettings=ServerSide.Parent.Settings:GetChildren()\n\t--TEMP, REMOVE WHEN DONE TESTING\n\t--ServerSide=game.StarterPlayer.StarterCharacterScripts.ThreadManager\n\t--Ready\n\twarn(\"Setup Ready\")\n\twarn(ServerSettings)\n\n\tlocal SizeT=0\n\tlocal function Finalize(Button, Obj, PatchColor)\n\t\tif PatchColor then\n\t\t\tButton.BackgroundColor3=Color3.fromRGB(150, 0, 125)\n\t\telseif PatchColor==false then\n\t\t\tButton.BackgroundColor3=Color3.fromRGB(150, 55, 1)\n\t\tend\n\t\tButton.Title.Text=Obj.Name\n\t\tButton.Visible=true\n\t\tSizeT+=Button.Size.Y.Offset\n\tend\n\t\n\t--Create UI Elements\n\tfor i, Obj in pairs(ServerSide.Parent.Settings:GetChildren()) do\n\t\tlocal NewButton\n\t\tif Obj:IsA(\"BoolValue\") then\n\t\t\tNewButton = script.Assets.ToggleElement:Clone()\n\t\t\tNewButton.Parent=script.Parent.Frame\n\t\t\tNewButton.Name=Obj.Name\n\t\t\tNewButton.LocalScript.Type.Value=\"Bool\"\n\t\t\tNewButton.LocalScript.Enabled=true\n\t\t\tif Obj.Value == true then\n\t\t\t\tNewButton.TextButton.BackgroundColor3=Color3.fromRGB(15, 150, 0)\n\t\t\t\tNewButton.TextButton.Text=\"Enabled\"\n\t\t\telse \n\t\t\t\tNewButton.TextButton.BackgroundColor3=Color3.fromRGB(150, 0, 2)\n\t\t\t\tNewButton.TextButton.Text=\"Disabled\"\n\t\t\tend\n\t\t\tFinalize(NewButton, Obj, false)\n\t\telseif Obj:IsA(\"IntValue\") then\n\t\t\tNewButton = script.Assets.ToggleElement:Clone()\n\t\t\tNewButton.Parent=script.Parent.Frame\n\t\t\tNewButton.Name=Obj.Name\n\t\t\tNewButton.LocalScript.Type.Value=\"IntString\"\n\t\t\tNewButton.LocalScript.Enabled=true\n\t\t\tNewButton.TextBox.BackgroundColor3=Color3.fromRGB(0, 138, 150)\n\t\t\tNewButton.TextBox.Text=Obj.Value\n\t\t\tFinalize(NewButton, Obj, true)\n\t\telseif Obj:IsA(\"NumberValue\") then\n\t\t\tNewButton = script.Assets.ToggleElement:Clone()\n\t\t\tNewButton.Parent=script.Parent.Frame\n\t\t\tNewButton.Name=Obj.Name\n\t\t\tNewButton.LocalScript.Type.Value=\"NumberString\"\n\t\t\tNewButton.LocalScript.Enabled=true\n\t\t\tNewButton.TextBox.BackgroundColor3=Color3.fromRGB(0, 138, 150)\n\t\t\tNewButton.TextBox.Text=Obj.Value\n\t\t\tFinalize(NewButton, Obj, true)\n\t\tend\n\t\t\n\tend\n\twarn(SizeT)\n\tscript.Parent.Frame.Size=UDim2.new(0, script.Parent.Frame.Size.X.Offset, 0, SizeT)\n\t\n\t\n\t--Fetch Setting From server\n\tlocal RequestState, SettingNew = ServiceEvent:InvokeServer(true, ServerSide.Parent.Settings.VisualDebug.Name)\n\tif RequestState==true then\n\t\twarn(RequestState)\n\t\twarn(SettingNew)\n\tend\n\t\nend\n\nscript.ButtonHandle.Event:Connect(function(ButtonName, DataPacket2, Debounce)\n\tif Debounce then\n\t\twarn\t(ButtonName..\" Interction!\")\n\t\twarn(DataPacket2)\n\t\tlocal IsValid=\"No Interaction\"\n\t\t--Button Functions are now serperated in code and conditions in \"ButtonService\"\n\t\t\n\t\tlocal function TestValidation(SkipState)\n\t\t\tlocal TMP = false\n\t\t\tif SkipState==1 then\n\t\t\t\tif DataPacket2[\"InteractionButton\"]==\"MouseButton1\" or DataPacket2[\"InteractionButton\"]==\"Touch\" then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\telseif SkipState==2 then\n\t\t\t\tif DataPacket2[\"Interaction\"]==\"FocusLost\" and DataPacket2[\"Type\"]==\"NumberString\" then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t return \"No Interaction (Unknown SkipState Provided)\"\n\t\t\tend\n\t\t\t\n\t\t\treturn \"Unknown Interaction Issue\"\n\t\tend\n\t\t\n\t\t\n\t\t--Interactions Allowed:\n\t\tif DataPacket2[\"Interaction\"] then\n\t\t\tif DataPacket2[\"InteractionButton\"] then\n\t\t\t\t--if DataPacket2[\"Interaction\"]==\"Begin\" then\n\t\t\t\tIsValid=TestValidation(1)\n\t\t\t\t--end\n\t\t\telse\n\t\t\t\tIsValid=TestValidation(2)\n\t\t\tend\n\t\t\twarn(IsValid)\n\t\tend\n\t\t\n\t\t--Gui Menu Visibility Toggle Check\n\t\tif ButtonName==\"MB\"  then\n\t\t\tif IsValid==true then\n\t\t\t\tlocal DP = {}\n\t\t\t\tscript.Parent.Frame.Visible = not script.Parent.Frame.Visible\n\t\t\t\tif script.Parent.Frame.Visible then\n\t\t\t\t\tDP[\"ForceVal\"]=\"Close\"\n\t\t\t\t\tDP[\"Color\"]=Color3.new(0.6, 0, 0.301961)\n\t\t\t\telse\n\t\t\t\t\tDP[\"ForceVal\"]=\"Terrain\"\n\t\t\t\t\tDP[\"Color\"]=Color3.new(0.862745, 0.862745, 0.862745)\n\t\t\t\tend\n\t\t\t\tscript.ButtonHandle:Fire(ButtonName, DP, false)--Send to button\n\t\t\t\tIsValid=\"Player Gui Vis was Toggled by \"..ButtonName\n\t\t\t\treturn\n\t\t\telse\n\t\t\t\tIsValid=ButtonName..\" Interaction Ignored By Player\"\n\t\t\tend\n\t\t\treturn \n\t\tend\n\t\t\n\t\t--Data Handle\n\t\tif IsValid==true then\n\t\t\twarn(\"Element Requesting/Sending Server Data, Disabling Element and Firing Server!\")\n\t\t\tlocal DP = {--Disable Button\n\t\t\t\t[\"Clickable\"]=false,\n\t\t\t\t--[\"Color\"]=Color3.fromRGB(72, 72, 72),\n\t\t\t}\n\t\t\tscript.ButtonHandle:Fire(ButtonName, DP, false)--Send to button\n\t\t\t\n\n\t\t\t--Get Server Data, And make sure the button is disabled\n\t\t\tlocal DP={\n\t\t\t\t[\"ServerData\"]={\n\t\t\t\t\t[\"ToggleSetting\"]=ButtonName, --Tell Server to \n\t\t\t\t\t[\"Callback\"]=ButtonName, --Create Callback instance\n\t\t\t\t}\n\t\t\t}\n\t\t\t--Add the Data from the button to the server Packet\n\t\t\tfor i, Val in DataPacket2 do\n\t\t\t\tDP[\"ServerData\"][i]=Val\n\t\t\tend\n\t\t\tDataEv:FireServer(DP)--Fire off to server\n\t\telse\n\t\t\twarn(\"Server Not Called, ErMSG: \"..IsValid)\n\t\tend\n\t\t\n\t\treturn\n\tend\n\treturn\nend)\n\n--Request Data(Not Needed)\n--DataEv:FireServer(DataPacket)\n\n--Get Data\nDataEv.OnClientEvent:Connect(function(DataPacket2)\n\twarn(DataPacket2)\n\t--Callback function(This just feeds the Data from the Callback to the button that called the API)\n\tif DataPacket2[\"Callback\"] then\n\t\twarn(\"Correcting Button\")\n\t\tlocal NewPacket = {\n\t\t}\n\t\tfor i, Val in DataPacket2[\"Callback\"] do\n\t\t\tNewPacket[i]=Val\n\t\tend\n\t\tscript.ButtonHandle:Fire(DataPacket2[\"Callback\"][\"ButtonName\"], NewPacket, false)\n\t\treturn\n\tend\n\t\n\tif DataPacket2[\"Setup\"] then\n\t\tlocal CoreGui\n\t\t\n\t\t--script.Parent:WaitForChild(\"MB\").Parent\n\tend\n\t\n\t\n\treturn\nend)\n"},"Children":{"Assets":{"NME":"Assets","Parent":"Controller","Properties":{"Parent":"Controller","Name":"Assets","Archivable":"true"},"Children":{"TextBox":{"NME":"TextBox","Parent":"Assets","Properties":{"NextSelectionLeft":"nil","TextWrapped":"true","LineHeight":"1","Active":"true","TextStrokeTransparency":"1","SelectionStart":"-1","TextTruncate":"Enum.TextTruncate.None","SizeConstraint":"Enum.SizeConstraint.RelativeXY","ZIndex":"1","BorderSizePixel":"0","TextEditable":"true","RichText":"false","AutoLocalize":"true","NextSelectionDown":"nil","Transparency":"0","Parent":"Assets","Name":"TextBox","TextYAlignment":"Enum.TextYAlignment.Center","TextScaled":"true","BackgroundColor3":"0.666667, 0, 0.0117647","Archivable":"true","FontFace":"Font { Family = rbxasset://fonts/families/SourceSansPro.json, Weight = Regular, Style = Normal }","ShowNativeInput":"true","BorderMode":"Enum.BorderMode.Outline","Selectable":"true","TextTransparency":"0","PlaceholderColor3":"0.7, 0.7, 0.7","MultiLine":"false","AnchorPoint":"0, 0","CursorPosition":"1","ClearTextOnFocus":"false","TextXAlignment":"Enum.TextXAlignment.Center","NextSelectionRight":"nil","PlaceholderText":"","AutomaticSize":"Enum.AutomaticSize.None","Size":"{0, 50}, {0, 20}","TextStrokeColor3":"0, 0, 0","TextSize":"14","LayoutOrder":"0","ClipsDescendants":"false","BorderColor3":"0, 0, 0","Text":"TextBox","TextColor3":"0, 0, 0","RootLocalizationTable":"nil","Rotation":"0","Font":"Enum.Font.SourceSans","BackgroundTransparency":"0","Position":"{1, 0}, {-0.0299999993, 0}","Visible":"true","MaxVisibleGraphemes":"-1","NextSelectionUp":"nil","SelectionImageObject":"nil"},"Children":{"UICorner":{"NME":"UICorner","Parent":"TextBox","Properties":{"Parent":"TextBox","Name":"UICorner","Archivable":"true","CornerRadius":"0, 8"},"Children":[],"CLS":"UICorner"}},"CLS":"TextBox"},"TextButton":{"NME":"TextButton","Parent":"Assets","Properties":{"LayoutOrder":"0","TextWrapped":"true","LineHeight":"1","Active":"true","TextStrokeTransparency":"1","TextTruncate":"Enum.TextTruncate.None","SizeConstraint":"Enum.SizeConstraint.RelativeXY","ZIndex":"1","BorderSizePixel":"0","RichText":"false","AutoLocalize":"true","NextSelectionDown":"nil","AutoButtonColor":"true","Transparency":"0","TextYAlignment":"Enum.TextYAlignment.Center","TextScaled":"true","BackgroundColor3":"0.666667, 0, 0.0117647","FontFace":"Font { Family = rbxasset://fonts/families/SourceSansPro.json, Weight = Regular, Style = Normal }","Parent":"Assets","BorderMode":"Enum.BorderMode.Outline","Selectable":"true","Name":"TextButton","Archivable":"true","TextStrokeColor3":"0, 0, 0","AnchorPoint":"0, 0","Modal":"false","TextXAlignment":"Enum.TextXAlignment.Center","TextTransparency":"0","NextSelectionRight":"nil","Selected":"false","AutomaticSize":"Enum.AutomaticSize.None","Size":"{0, 50}, {0, 20}","TextSize":"14","TextColor3":"0, 0, 0","Visible":"false","ClipsDescendants":"false","BorderColor3":"0, 0, 0","Text":"Button","BackgroundTransparency":"0","RootLocalizationTable":"nil","Rotation":"0","Font":"Enum.Font.SourceSans","Style":"Enum.ButtonStyle.Custom","Position":"{1, 0}, {-0.0303029381, 0}","NextSelectionUp":"nil","MaxVisibleGraphemes":"-1","NextSelectionLeft":"nil","SelectionImageObject":"nil"},"Children":{"UICorner":{"NME":"UICorner","Parent":"TextButton","Properties":{"Parent":"TextButton","Name":"UICorner","Archivable":"true","CornerRadius":"0, 8"},"Children":[],"CLS":"UICorner"}},"CLS":"TextButton"},"ToggleElement":{"NME":"ToggleElement","Parent":"Assets","Properties":{"Visible":"false","Active":"false","Selectable":"false","Parent":"Assets","Name":"ToggleElement","AnchorPoint":"0, 0","Archivable":"true","RootLocalizationTable":"nil","NextSelectionUp":"nil","NextSelectionRight":"nil","ZIndex":"1","AutomaticSize":"Enum.AutomaticSize.None","Size":"{0, 80}, {0, 20}","SizeConstraint":"Enum.SizeConstraint.RelativeXY","BorderSizePixel":"0","AutoLocalize":"true","ClipsDescendants":"false","BorderColor3":"0, 0, 0","NextSelectionLeft":"nil","NextSelectionDown":"nil","LayoutOrder":"0","Rotation":"0","Transparency":"0","Style":"Enum.FrameStyle.Custom","SelectionImageObject":"nil","BorderMode":"Enum.BorderMode.Outline","BackgroundTransparency":"0","Position":"{0, 0}, {0, 0}","BackgroundColor3":"0.443137, 0.443137, 0.443137"},"Children":{"UICorner":{"NME":"UICorner","Parent":"ToggleElement","Properties":{"Parent":"ToggleElement","Name":"UICorner","Archivable":"true","CornerRadius":"0, 8"},"Children":[],"CLS":"UICorner"},"Title":{"NME":"Title","Parent":"ToggleElement","Properties":{"NextSelectionLeft":"nil","TextWrapped":"false","LineHeight":"1","Active":"false","TextStrokeTransparency":"1","TextTruncate":"Enum.TextTruncate.None","SizeConstraint":"Enum.SizeConstraint.RelativeXY","ZIndex":"1","BorderSizePixel":"0","RichText":"false","AutoLocalize":"true","NextSelectionDown":"nil","Transparency":"1","TextYAlignment":"Enum.TextYAlignment.Center","TextScaled":"false","BackgroundColor3":"1, 1, 1","FontFace":"Font { Family = rbxasset://fonts/families/SourceSansPro.json, Weight = Regular, Style = Normal }","BorderMode":"Enum.BorderMode.Outline","Selectable":"false","Parent":"ToggleElement","AnchorPoint":"0, 0","Name":"Title","Archivable":"true","TextXAlignment":"Enum.TextXAlignment.Center","NextSelectionRight":"nil","TextTransparency":"1","AutomaticSize":"Enum.AutomaticSize.None","Size":"{1, 0}, {1, 0}","TextStrokeColor3":"0, 0, 0","TextSize":"14","LayoutOrder":"0","ClipsDescendants":"false","BorderColor3":"0, 0, 0","Text":"Label","TextColor3":"0, 0, 0","RootLocalizationTable":"nil","Rotation":"0","Font":"Enum.Font.SourceSans","BackgroundTransparency":"1","Position":"{0, 0}, {0, 0}","Visible":"true","MaxVisibleGraphemes":"-1","NextSelectionUp":"nil","SelectionImageObject":"nil"},"Children":[],"CLS":"TextLabel"},"LocalScript":{"NME":"LocalScript","Parent":"ToggleElement","Properties":{"Enabled":"false","LinkedSource":"","Disabled":"true","Parent":"ToggleElement","Name":"LocalScript","Archivable":"true","Source":"local Input = script.Type.Value\nlocal Ev = script.Parent.Parent.Parent.Controller:WaitForChild(\"ButtonHandle\")\nlocal DP = {\n}\nlocal Clickable=true\nif Input==nil then\n\twarn(\"No Input Mode Set!\")\n\tInput = script.Type.Value\n\tif Input==nil then\n\t\treturn\t\n\tend\n\twarn(\"Patched Mode\")\nend\nif string.match(Input, \"Bool\") then\n\tInput = script.Parent.Parent.Parent.Controller.Assets.TextButton:Clone()\nelseif string.match(Input, \"NumberString\") then\n\tInput = script.Parent.Parent.Parent.Controller.Assets.TextBox:Clone()\nelseif string.match(Input, \"IntString\") then\n\tInput = script.Parent.Parent.Parent.Controller.Assets.TextBox:Clone()\nend\n\n\nInput.Parent=script.Parent\nInput.Visible=true\n\n--Input Began()\n\nif script.Type.Value==\"NumberString\" then\n\t--TextBox Focus lost Handle\n\tInput.FocusLost:Connect(function(Val, Val2)\n\t\tif Clickable==false then\n\t\t\twarn(\"TextBox Disabled!\")\n\t\t\treturn\n\t\tend\n\t\twarn(\"Finished\")\n\t\tprint(Input)\n\t\tprint(Val)\n\t\tprint(Val2) --@#;,\n\t\tInput.Text = string.gsub(Input.Text, \"%a\", \"\")\n\t\tInput.Text = string.gsub(Input.Text, \"!\", \"\")\n\t\tInput.Text = string.gsub(Input.Text, \"@\", \"\")\n\t\tInput.Text = string.gsub(Input.Text, \"#\", \"\")\n\t\tInput.Text = string.gsub(Input.Text, \";\", \"\")\n\t\tInput.Text = string.gsub(Input.Text, \",\", \"\")\n\t\tInput.Text = string.gsub(Input.Text, \"%s\", \"\")\n\t\tDP={\n\t\t\t[\"Interaction\"]=\"FocusLost\",\n\t\t\t[\"Text\"]=Input.Text,\n\t\t\t[\"Type\"]=script.Type.Value,\n\t\t\t[\"ButtonName\"]=script.Parent.Name\n\t\t}\n\t\tEv:Fire(script.Parent.Name, DP, true)\n\tend)\nelseif script.Type.Value==\"IntString\" then\n\t--TextBox Focus lost Handle\n\tInput.FocusLost:Connect(function(Val, Val2)\n\t\tif Clickable==false then\n\t\t\twarn(\"TextBox Disabled!\")\n\t\t\treturn\n\t\tend\n\t\twarn(\"Finished\")\n\t\tprint(Input)\n\t\tprint(Val)\n\t\tprint(Val2)\n\t\tInput.Text = string.gsub(Input.Text, \"%a\", \"\")\n\t\tInput.Text = string.gsub(Input.Text, \"%p\", \"\")\n\t\tInput.Text = string.gsub(Input.Text, \"%s\", \"\")\n\t\tDP={\n\t\t\t[\"Interaction\"]=\"FocusLost\",\n\t\t\t[\"Text\"]=Input.Text,\n\t\t\t[\"Type\"]=script.Type.Value,\n\t\t\t[\"ButtonName\"]=script.Parent.Name\n\t\t}\n\t\tEv:Fire(script.Parent.Name, DP, true)\n\tend)\nelseif script.Type.Value==\"TextString\" then\n\t--TextBox Focus lost Handle\n\tInput.FocusLost:Connect(function(Val, Val2)\n\t\tif Clickable==false then\n\t\t\twarn(\"TextBox Disabled!\")\n\t\t\treturn\n\t\tend\n\t\twarn(\"Finished 2\")\n\t\tprint(Input)\n\t\tprint(Val)\n\t\tprint(Val2)\n\t\t--[[Input.Text = string.gsub(Input.Text, \"%a\", \"\")\n\t\tInput.Text = string.gsub(Input.Text, \"%p\", \"\")\n\t\tInput.Text = string.gsub(Input.Text, \"%s\", \"\")]]\n\t\tDP={\n\t\t\t[\"Interaction\"]=\"FocusLost\",\n\t\t\t[\"Text\"]=Input.Text,\n\t\t\t[\"Type\"]=script.Type.Value,\n\t\t\t[\"ButtonName\"]=script.Parent.Name\n\t\t}\n\t\tEv:Fire(script.Parent.Name, DP, true)\n\tend)\nelseif script.Type.Value==\"Bool\" then\n\tInput.InputBegan:Connect(function(Input1)\n\t\tprint(Input1)\n\t\tprint(Input1.UserInputType.Name)\n\t\tprint(Input1.UserInputState.Name)\n\t\tif Clickable==false then\n\t\t\twarn(\"Button Disabled!\")\n\t\t\treturn\n\t\tend\n\n\t\tDP={\n\t\t\t[\"Interaction\"]=Input1.UserInputState.Name,\n\t\t\t[\"InteractionButton\"]=Input1.UserInputType.Name,\n\t\t\t[\"Type\"]=script.Type.Value,\n\t\t\t[\"ButtonName\"]=script.Parent.Name,\n\t\t}\n\t\tif type(Input1)==\"table\" then\n\t\t\tif string.find(Input.ClassName, \"TextBox\") then\n\t\t\t\tDP[\"Text\"]=Input.Text\n\t\t\t\tif table.find(Input1, \"KeyCode\") then\n\t\t\t\t\tDP[\"KeyCode\"]=Input1.KeyCode.Name\n\t\t\t\tend\n\t\t\t\tEv:Fire(script.Parent.Name, DP, true)\n\t\t\telseif string.find(Input.ClassName, \"TextButton\") then\n\t\t\t\tif Input1.UserInputType.Name==\"MouseButton1\" or Input1.UserInputType.Name==\"Touch\" then\n\t\t\t\t\tEv:Fire(script.Parent.Name, DP, true)\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tEv:Fire(script.Parent.Name, DP, true)\n\t\t\tend\n\t\telse\n\t\t\tEv:Fire(script.Parent.Name, DP, true)\n\t\tend\n\n\t\t--Ev:Fire(script.Parent.Name, DP, true)\n\tend)\nelse\n\twarn(\"Possible Failure on \"..script.Parent.Name)\nend\n\n\n--Callback Event\nEv.Event:Connect(function(ButtonName, DataPacket, Debounce)\n\tif Debounce==false and script.Parent.Name==ButtonName then\n\n\t\t--Clickable Flag(Disables Player Interaction with the element, Good for loading or setting a delay from the server)\n\t\tif DataPacket[\"Clickable\"]~=nil then\n\t\t\tClickable=DataPacket[\"Clickable\"]\n\t\tend\n\t\t\n\t\t--force Val(Consider removing the color stuff, the script is streamline so it wont matter if Color flag is more used)\n\t\tif DataPacket[\"ForceVal\"]~=nil then\n\t\t\tif string.find(Input.ClassName, \"TextBox\") then\n\t\t\t\tInput.Text=DataPacket[\"ForceVal\"]\n\t\t\telseif string.find(Input.ClassName, \"TextButton\") then\n\t\t\t\tif DataPacket[\"ForceVal\"] == true then\n\t\t\t\t\tInput.BackgroundColor3=Color3.fromRGB(15, 150, 0)\n\t\t\t\t\tInput.Text=\"Enabled\"\n\t\t\t\telseif DataPacket[\"ForceVal\"] == false then\n\t\t\t\t\tInput.BackgroundColor3=Color3.fromRGB(150, 0, 2)\n\t\t\t\t\tInput.Text=\"Disabled\"\n\t\t\t\telse\n\t\t\t\t\tInput.Text=DataPacket[\"ForceVal\"]\n\t\t\t\tend\n\t\t\telseif string.find(Input.ClassName, \"TextLabel\") then\n\t\t\t\tInput.Text=DataPacket[\"ForceVal\"]\n\t\t\tend\t\n\t\tend\n\t\t\n\t\t--color flag\n\t\tif DataPacket[\"Color\"]~=nil then\n\t\t\tif DataPacket[\"Color\"]==\"Red\" then\n\t\t\t\tInput.BackgroundColor3=Color3.fromRGB(150, 0, 2)\n\t\t\telseif DataPacket[\"Color\"]==\"Green\" then\n\t\t\t\tInput.BackgroundColor3=Color3.fromRGB(15, 150, 0)\n\t\t\telse\n\t\t\t\tpcall(function()\n\t\t\t\t\tInput.BackgroundColor3=DataPacket[\"Color\"]\n\t\t\t\tend)\n\t\t\tend\n\t\tend\n\t\t\n\t\t--remove flag\n\t\tif DataPacket[\"RemoveElem\"]==true then\n\t\t\tscript.Parent:Destroy()\n\t\t\tscript.Enabled=false\n\t\tend\n\n\n\t\twarn(ButtonName..\" Recieved Event\")\n\t\twarn(DataPacket)\n\tend\nend)\t\n\n\n--Gotta patch the old function of text box into controller, so we can filter stuff\n--Also make sure it works with the element system, at the time of doing this i was to bored\n--[[Input.InputBegan:Connect(function(input)\n\tlocal DataPacket={\n\t\t[\"InVal\"]=input.UserInputState.Name,\n\t\t[\"InType\"]=input.UserInputType.Name,\n\t\t[\"KeyCode\"]=input.KeyCode.Name,\n\t\t[\"Text\"]=Input.Text,\n\t\t[\"Type\"]=script.Type.Value\n\t}\n\twarn(DataPacket)\n\tif script.Type.Value==\"Number\" then\n\t\tInput.FocusLost:Connect(function()\n\t\t\twarn(\"Finished\")\n\t\t\tInput.Text = string.gsub(Input.Text, \"%a\", \"\")\n\t\t\tInput.Text = string.gsub(Input.Text, \"%p\", \"\")\n\t\t\tInput.Text = string.gsub(Input.Text, \"%s\", \"\")\n\t\t\tDataPacket={\n\t\t\t\t[\"InVal\"]=input.UserInputState.Name,\n\t\t\t\t[\"InType\"]=input.UserInputType.Name,\n\t\t\t\t[\"KeyCode\"]=input.KeyCode.Name,\n\t\t\t\t[\"Text\"]=Input.Text,\n\t\t\t\t[\"Type\"]=script.Type.Value\n\t\t\t}\n\t\t\tscript.Parent.Parent.Parent.Controller.ButtonHandle:Fire(DataPacket)\n\t\tend)\n\telse\n\t\tscript.Parent.Parent.Parent.Controller.ButtonHandle:Fire(DataPacket)\n\tend\n\t\nend)]]"},"Children":{"Type":{"NME":"Type","Parent":"LocalScript","Properties":{"Value":"Toggle","Parent":"LocalScript","Archivable":"true","Name":"Type"},"Children":[],"CLS":"StringValue"}},"CLS":"LocalScript"}},"CLS":"Frame"}},"CLS":"Folder"},"ButtonHandle":{"NME":"ButtonHandle","Parent":"Controller","Properties":{"Parent":"Controller","Name":"ButtonHandle","Archivable":"true"},"Children":[],"CLS":"BindableEvent"}},"CLS":"LocalScript"},"Frame":{"NME":"Frame","Parent":"ScreenGui","Properties":{"Visible":"false","Active":"false","Selectable":"false","Parent":"ScreenGui","Name":"Frame","AnchorPoint":"0, 0","Archivable":"true","RootLocalizationTable":"nil","NextSelectionUp":"nil","NextSelectionRight":"nil","ZIndex":"1","AutomaticSize":"Enum.AutomaticSize.None","Size":"{0, 130}, {0.850000024, 0}","SizeConstraint":"Enum.SizeConstraint.RelativeXY","BorderSizePixel":"0","AutoLocalize":"true","ClipsDescendants":"false","BorderColor3":"0, 0, 0","NextSelectionLeft":"nil","NextSelectionDown":"nil","LayoutOrder":"0","Rotation":"0","Transparency":"0.699999988079071","Style":"Enum.FrameStyle.Custom","SelectionImageObject":"nil","BorderMode":"Enum.BorderMode.Outline","BackgroundTransparency":"0.699999988079071","Position":"{0.194875985, 0}, {0.0636864826, 0}","BackgroundColor3":"0.262745, 0.262745, 0.262745"},"Children":{"UICorner":{"NME":"UICorner","Parent":"Frame","Properties":{"Parent":"Frame","Name":"UICorner","Archivable":"true","CornerRadius":"0, 8"},"Children":[],"CLS":"UICorner"},"UIListLayout":{"NME":"UIListLayout","Parent":"Frame","Properties":{"VerticalAlignment":"Enum.VerticalAlignment.Top","FillDirection":"Enum.FillDirection.Vertical","HorizontalAlignment":"Enum.HorizontalAlignment.Left","Name":"UIListLayout","Parent":"Frame","Padding":"0, 0","Archivable":"true","SortOrder":"Enum.SortOrder.Name"},"Children":[],"CLS":"UIListLayout"}},"CLS":"Frame"},"Dest":{"NME":"Dest","Parent":"ScreenGui","Properties":{"Value":"StarterGui","Parent":"ScreenGui","Archivable":"true","Name":"Dest"},"Children":[],"CLS":"StringValue"},"MB":{"NME":"MB","Parent":"ScreenGui","Properties":{"LayoutOrder":"0","TextWrapped":"false","LineHeight":"1","Active":"true","TextStrokeTransparency":"1","TextTruncate":"Enum.TextTruncate.None","SizeConstraint":"Enum.SizeConstraint.RelativeXY","ZIndex":"1","BorderSizePixel":"0","RichText":"false","AutoLocalize":"true","NextSelectionDown":"nil","AutoButtonColor":"true","Transparency":"0","TextYAlignment":"Enum.TextYAlignment.Center","TextScaled":"false","BackgroundColor3":"1, 1, 1","FontFace":"Font { Family = rbxasset://fonts/families/SourceSansPro.json, Weight = Regular, Style = Normal }","Parent":"ScreenGui","BorderMode":"Enum.BorderMode.Outline","Selectable":"true","Name":"MB","Archivable":"true","TextStrokeColor3":"0, 0, 0","AnchorPoint":"0, 0","Modal":"false","TextXAlignment":"Enum.TextXAlignment.Center","TextTransparency":"0","NextSelectionRight":"nil","Selected":"false","AutomaticSize":"Enum.AutomaticSize.None","Size":"{0, 50}, {0, 15}","TextSize":"14","TextColor3":"0, 0, 0","Visible":"true","ClipsDescendants":"false","BorderColor3":"0, 0, 0","Text":"Close","BackgroundTransparency":"0","RootLocalizationTable":"nil","Rotation":"0","Font":"Enum.Font.SourceSans","Style":"Enum.ButtonStyle.Custom","Position":"{0, 248}, {0, 7}","NextSelectionUp":"nil","MaxVisibleGraphemes":"-1","NextSelectionLeft":"nil","SelectionImageObject":"nil"},"Children":{"UICorner":{"NME":"UICorner","Parent":"MB","Properties":{"Parent":"MB","Name":"UICorner","Archivable":"true","CornerRadius":"0, 8"},"Children":[],"CLS":"UICorner"},"CustomScript":{"NME":"CustomScript","Parent":"MB","Properties":{"Enabled":"true","LinkedSource":"","Disabled":"false","Parent":"MB","Name":"CustomScript","Archivable":"true","Source":"local Input = script.Parent\nlocal Ev = script.Parent.Parent.Controller:WaitForChild(\"ButtonHandle\")\nlocal DP = {\n}\nlocal Clickable=true\nInput.Visible=true\n\nif script.Parent.Parent.Frame.Visible then\n\tInput.Text=\"Close\"\n\tInput.BackgroundColor3=Color3.new(0.470588, 0, 0.235294)\nelse\n\tInput.Text=\"Terrain\"\n\tInput.BackgroundColor3=Color3.new(0.862745, 0.862745, 0.862745)\nend\n\n\nInput.InputBegan:Connect(function(Input1)\n\tprint(Input1)\n\tprint(Input1.UserInputType.Name)\n\tprint(Input1.UserInputState.Name)\n\n\tDP={\n\t\t[\"Interaction\"]=Input1.UserInputState.Name,\n\t\t[\"InteractionButton\"]=Input1.UserInputType.Name,\n\t\t[\"ButtonName\"]=script.Parent.Name,\n\t}\n\tEv:Fire(script.Parent.Name, DP, true)\nend)\n\n--Callback Event\nEv.Event:Connect(function(ButtonName, DataPacket, Debounce)\n\tif Debounce==false and script.Parent.Name==ButtonName then\n\n\t\t--Clickable Flag(Disables Player Interaction with the element, Good for loading or setting a delay from the server)\n\t\tif DataPacket[\"Clickable\"]~=nil then\n\t\t\tClickable=DataPacket[\"Clickable\"]\n\t\tend\n\n\t\t--force Val(Consider removing the color stuff, the script is streamline so it wont matter if Color flag is more used)\n\t\tif DataPacket[\"ForceVal\"]~=nil then\n\t\t\tif string.find(Input.ClassName, \"TextBox\") then\n\t\t\t\tInput.Text=DataPacket[\"ForceVal\"]\n\t\t\telseif string.find(Input.ClassName, \"TextButton\") then\n\t\t\t\tif DataPacket[\"ForceVal\"] == true then\n\t\t\t\t\tInput.BackgroundColor3=Color3.fromRGB(15, 150, 0)\n\t\t\t\t\tInput.Text=\"Enabled\"\n\t\t\t\telseif DataPacket[\"ForceVal\"] == false then\n\t\t\t\t\tInput.BackgroundColor3=Color3.fromRGB(150, 0, 2)\n\t\t\t\t\tInput.Text=\"Disabled\"\n\t\t\t\telse\n\t\t\t\t\tInput.Text=DataPacket[\"ForceVal\"]\n\t\t\t\tend\n\t\t\telseif string.find(Input.ClassName, \"TextLabel\") then\n\t\t\t\tInput.Text=DataPacket[\"ForceVal\"]\n\t\t\tend\t\n\t\tend\n\n\t\t--color flag\n\t\tif DataPacket[\"Color\"]~=nil then\n\t\t\tif DataPacket[\"Color\"]==\"Red\" then\n\t\t\t\tInput.BackgroundColor3=Color3.fromRGB(150, 0, 2)\n\t\t\telseif DataPacket[\"Color\"]==\"Green\" then\n\t\t\t\tInput.BackgroundColor3=Color3.fromRGB(15, 150, 0)\n\t\t\telse\n\t\t\t\tpcall(function()\n\t\t\t\t\tInput.BackgroundColor3=DataPacket[\"Color\"]\n\t\t\t\tend)\n\t\t\tend\n\t\tend\n\n\t\t--remove flag\n\t\tif DataPacket[\"RemoveElem\"]==true then\n\t\t\tscript.Parent:Destroy()\n\t\t\tscript.Enabled=false\n\t\tend\n\n\n\t\twarn(ButtonName..\" Recieved Event\")\n\t\twarn(DataPacket)\n\tend\nend)\t"},"Children":[],"CLS":"LocalScript"}},"CLS":"TextButton"}},"PackageInfo":{"PackageNME":"ScreenGui","PackageDESC":"No Desc information Set!"}},"OldAsset(RemoveMe)":{"DestinationParent":"StarterCharacterScripts","NME":"OldAsset(RemoveMe)","Properties":{"Parent":"ProjectFolder","Name":"OldAsset(RemoveMe)","Archivable":"true"},"Parent":"ProjectFolder","CLS":"Folder","Children":{"GridThread":{"NME":"GridThread","Parent":"OldAsset(RemoveMe)","Properties":{"Enabled":"false","LinkedSource":"","Disabled":"true","Parent":"OldAsset(RemoveMe)","Name":"GridThread","Archivable":"true","Source":"print(\"Hello world!\")\nlocal Size=20\nlocal Retry=true\nlocal Idle=false\nlocal FrameBuffer=5\nlocal Frame=0\nlocal Debug=false\n\n\nfunction roundNumber(num, numDecimalPlaces)\n\treturn string.format(\"%.\" .. (numDecimalPlaces or 0) .. \"f\", num)\nend\nfunction round2(n, to)\n\treturn math.floor(n/to + 0.5) * to\nend\nlocal function CreatePart(X, Y, Z)\n\tlocal New=game.Workspace.Baseplate:Clone()\n\tNew.Parent=game.Workspace.TempChunks\n\tNew.Name = \"ChunkSlot\"..math.random(-1270000,1270000)\n\tfor i, Obj in pairs(game.Workspace.TempChunks:GetChildren()) do\n\t\tif Obj.Name==New.Name then\n\t\t\tNew.Name = \"ChunkSlot\"..math.random(-1270000,1270000)\n\t\tend\n\tend\n\tNew.Position=Vector3.new(X,Y,Z)\n\t--if Debug then warn(\"Target Created\") end\n\tRetry=true\n\treturn\nend\n\n\nscript.Parent:GetActor():BindToMessage(\"Begin\", function(StartSearchPos, RenderDist, LazyChunks, PlayerChar)\n\tIdle=false\n\tscript.Sensor.Position=StartSearchPos\n\tscript.Sensor.Transparency=0.7\n\tlocal X=StartSearchPos.X\n\tlocal Z=StartSearchPos.Z\n\tlocal PX = round2(PlayerChar.HumanoidRootPart.Position.X, Size)\n\tlocal PZ = round2(PlayerChar.HumanoidRootPart.Position.Z, Size)\n\tRenderDist=script.Parent.Parent.Parent.Settings.RenderDistance.Value\n\tLazyChunks=script.Parent.Parent.Parent.Settings.LazyChunks.Value\n\t\n\t\n\tX = math.clamp(X, PX-RenderDist, PX+RenderDist)\n\tZ = math.clamp(Z, PZ-RenderDist, PZ+RenderDist)\n\t\n\tif RenderDist==nil then\n\t\tRenderDist=60\n\tend\n\t\n\n\t--if Debug then warn(\"/:\"..script.Name..\";\"..\" Thread Starting\") end\n\t\n\tlocal function Run()\n\t\tPX = round2(PlayerChar.HumanoidRootPart.Position.X, Size)\n\t\tPZ = round2(PlayerChar.HumanoidRootPart.Position.Z, Size)\n\t\tRenderDist=script.Parent.Parent.Parent.Settings.RenderDistance.Value\n\t\tLazyChunks=script.Parent.Parent.Parent.Settings.LazyChunks.Value\n\t\t\n\t\tlocal Table=script.Sensor:GetTouchingParts()\n\t\tfor i, Obj in pairs(Table) do\n\t\t\t\n\t\t\t--Visual Highlighter\n\t\t\tscript.Sensor.SelectionBox.Adornee=Obj\n\t\t\tscript.Sensor.SelectionBox.Visible=true\n\t\t\t--if Debug then warn(typeof(Obj)) end\n\t\t\tif typeof(Obj)==\"Instance\" then\n\t\t\t\t--if Debug then warn(\"A\") end\n\t\t\t\tlocal M=math.random(1,4)\n\t\t\t\tif M==1 then\n\t\t\t\t\tZ=Z+Size\n\t\t\t\telseif M==2 then\n\t\t\t\t\tX=X+Size\n\t\t\t\telseif M==3 then\n\t\t\t\t\tZ=Z-Size\n\t\t\t\telseif M==4 then\n\t\t\t\t\tX=X-Size\n\t\t\t\telse\n\t\t\t\tend\n\t\t\t\tRetry=true\n\t\t\tend\n\t\t\tX = math.clamp(X, PX-RenderDist, PX+RenderDist)\n\t\t\tZ = math.clamp(Z, PZ-RenderDist, PZ+RenderDist)\n\t\t\tif Retry then\n\t\t\t\t--Idle=true\n\t\t\t\t--script.Function:Invoke(script.Name, Vector3.new(StartSearchPos.X+X, StartSearchPos.Y, StartSearchPos.Z+Z))\n\t\t\t\t--script.Sensor.Position=Vector3.new(StartSearchPos.X+X, StartSearchPos.Y, StartSearchPos.Z+Z)\n\t\t\t\tscript.Sensor.Position=Vector3.new(X, StartSearchPos.Y, Z)\n\t\t\tend\n\t\tend\n\t\tif #Table==0 then\n\t\t\tRetry=false\n\t\telse\n\t\t\tRetry=true\n\t\tend\t\n\t\treturn\n\tend\n\t\n\t\n\n\tif Retry then\n\t\tPX = round2(PlayerChar.HumanoidRootPart.Position.X, Size)\n\t\tPZ = round2(PlayerChar.HumanoidRootPart.Position.Z, Size)\n\t\tRenderDist=script.Parent.Parent.Parent.Settings.RenderDistance.Value\n\t\tLazyChunks=script.Parent.Parent.Parent.Settings.LazyChunks.Value\n\t\twhile Retry do\n\t\t\tRun()\n\t\t\tgame[\"Run Service\"].Heartbeat:Wait()\n\t\tend\n\t\tif Retry==false then\n\t\t\t--if Debug then warn(\"Target Made\") end\n\t\t\tCreatePart(X, script.Sensor.Position.Y, Z)\n\t\t\tif Retry==true then\n\t\t\t\tif Debug then warn(\"/:\"..script.Name..\";\"..\" Thread Now Idle\") end\n\t\t\t\tgame[\"Run Service\"].Heartbeat:Wait()\n\t\t\t\tif LazyChunks~=true then\n\t\t\t\t\tscript.Function:Invoke(script.Name, Vector3.new(X, script.Sensor.Position.Y, Z))\n\t\t\t\telse\n\t\t\t\t\t--script.Sensor.Position=Vector3.new(X, StartSearchPos.Y, Z)\n\t\t\t\t\tIdle=true\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tif Debug then warn(\"/:\"..script.Name..\";\"..\" Thread Missing Target/Error (Now Idling)\") end\n\t\t\tscript.Function:Invoke(script.Name, Vector3.new(X, script.Sensor.Position.Y, Z))\n\t\t\tIdle=true\n\t\tend\n\telse\n\t\tIdle=true\n\tend\n\twhile Idle do\n\t\tif Frame >= FrameBuffer then\n\t\t\tFrame=0\n\t\t\tif Idle then\n\t\t\t\tif Debug then warn(\"/:\"..script.Name..\";\"..\" Thread Idle\") end\n\t\t\t\tX = math.clamp(X, PX-RenderDist, PX+RenderDist)\n\t\t\t\tZ = math.clamp(Z, PZ-RenderDist, PZ+RenderDist)\n\t\t\t\tscript.Function:Invoke(script.Name, Vector3.new(X, script.Sensor.Position.Y, Z))\n\t\t\tend\n\t\telse\n\t\t\tFrame+=1\n\t\tend\n\t\twait(0.01)\n\tend\nend)"},"Children":{"Function":{"NME":"Function","Parent":"GridThread","Properties":{"Parent":"GridThread","Name":"Function","Archivable":"true"},"Children":[],"CLS":"BindableFunction"},"Sensor":{"NME":"Sensor","Parent":"GridThread","Properties":{"CFrame":"0, -0.899999619, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1","RightSurface":"Enum.SurfaceType.Smooth","AssemblyAngularVelocity":"0, 0, 0","BottomSurface":"Enum.SurfaceType.Smooth","CanCollide":"true","RootPriority":"0","AssemblyLinearVelocity":"0, 0, 0","Transparency":"1","Orientation":"0, 0, 0","MaterialVariant":"","Reflectance":"0","Color":"0.121569, 0.501961, 0.113725","Massless":"false","CollisionGroupId":"0","Parent":"GridThread","Locked":"false","Material":"Enum.Material.Plastic","Archivable":"true","Size":"10, 1, 10","Name":"Sensor","BackSurface":"Enum.SurfaceType.Smooth","TopSurface":"Enum.SurfaceType.Smooth","CustomPhysicalProperties":"nil","CanQuery":"true","Velocity":"0, 0, 0","CanTouch":"true","CastShadow":"true","Rotation":"0, 0, 0","Anchored":"true","BrickColor":"Forest green","Position":"0, -0.8999996185302734, 0","LeftSurface":"Enum.SurfaceType.Smooth","FrontSurface":"Enum.SurfaceType.Smooth","Shape":"Enum.PartType.Block","PivotOffset":"0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1"},"Children":{"SelectionBox":{"NME":"SelectionBox","Parent":"Sensor","Properties":{"Visible":"false","LineThickness":"0.30000001192092896","Color":"Forest green","SurfaceTransparency":"0.5","Transparency":"0","Color3":"0.121569, 0.501961, 0.113725","Parent":"Sensor","Name":"SelectionBox","Archivable":"true","SurfaceColor3":"0.67451, 0, 0.0117647","Adornee":"Baseplate"},"Children":[],"CLS":"SelectionBox"}},"CLS":"Part"}},"CLS":"Script"},"Dest":{"NME":"Dest","Parent":"OldAsset(RemoveMe)","Properties":{"Value":"StarterCharacterScripts","Parent":"OldAsset(RemoveMe)","Archivable":"true","Name":"Dest"},"Children":[],"CLS":"StringValue"},"ActorManager":{"NME":"ActorManager","Parent":"OldAsset(RemoveMe)","Properties":{"Enabled":"false","LinkedSource":"","Disabled":"true","Parent":"OldAsset(RemoveMe)","Name":"ActorManager","Archivable":"true","Source":"print(\"Running Actor tester\")\n--Setup Threads\nlocal actor = script:GetActor()\nlocal Threads = {}\nlocal PlayerChar = script.Parent:WaitForChild(\"HumanoidRootPart\")\n\n--Server Settings\nlocal Size=20\nlocal RenderLimit = 120--Read Below\n\n--Player Settings-----\nlocal RenderDist=script.RenderDistance.Value or 60\nlocal LazyChunks=script.RenderDistance.Value or false\n--GamepassLocked Player Settings\nlocal RenderLock = true --public servers(Limited to 120 and Locked to that), Priv servers(limit of 480, and are unlockable){Desc: Locks render dist to max of 120}\nlocal ThreadLimit=4 --(4 for regular users total, Priv servers get 6) Gamepass will multiply this by 2 (8 Normal servers, 12 with Priv Servers)\n--Player Settings-----\n\n--Locker--\nif RenderLock==false then\n\tRenderLimit = 480\n\tif game.PrivateServerId ~= \"\" then\n\t\tif game.PrivateServerOwnerId ~= 0 then\n\t\t\tRenderLimit = 480\n\t\t\tRenderLock = true --Unlock here if gamepass owned, it unlocks the RenderLimit via {if [RenderLimit <= RenderDist and RenderLock==true]}\n\t\telse\n\t\t\tRenderLimit = 120\n\t\t\tRenderLock = true\n\t\tend\n\telse\n\t\tRenderLimit = 120\n\t\tRenderLock = true --Relock render limit, Allow it to be unlocked with a Priv server check(if {priv server} then [Unlock], Else [Lock])\n\tend\nend\n\n\n\n--------Script Start----------\nfunction roundNumber(num, numDecimalPlaces)\n\treturn string.format(\"%.\" .. (numDecimalPlaces or 0) .. \"f\", num)\nend\nfunction round2(n, to)\n\treturn math.floor(n/to + 0.5) * to\nend\n\nfunction StartListener(Func)\n\t--This needs to be reworked\n\t--for i, Func in pairs(Threads) do\n\t\tRenderDist=script.RenderDistance.Value\n\t\tLazyChunks=script.RenderDistance.Value\n\t\twarn(Threads)\n\t\tFunc[1].Function.OnInvoke = function(ThreadName, UpdatedPos)\n\t\t\t--warn(\"B\")\n\t\t\t--warn(ThreadName)\n\t\t\t--warn(UpdatedPos)\n\n\t\t\tlocal Z=UpdatedPos.Z\n\t\t\tlocal X=UpdatedPos.X\n\t\t\tlocal function Run(N1,N2)\n\t\t\t\tlocal M=math.random(1,4)\n\t\t\t\tif M==1 then\n\t\t\t\t\tZ=Z+Size\n\t\t\t\telseif M==2 then\n\t\t\t\t\tX=X+Size\n\t\t\t\telseif M==3 then\n\t\t\t\t\tZ=Z-Size\n\t\t\t\telseif M==4 then\n\t\t\t\t\tX=X-Size\n\t\t\t\tend\n\t\t\t\treturn\n\t\t\tend\n\t\t\t--Run(1,4)\n\t\t\t--local NewVec=Vector3.new(X, -2.1, Z)\n\t\t\t--Func[2]:SendMessage(\"Begin\", NewVec)\n\n\t\t\tlocal PX=PlayerChar.Position.X\n\t\t\tPX = math.clamp(PX+X, PX-RenderDist, PX+RenderDist)\n\t\t\tPX = round2(PlayerChar.Position.X/1, Size)\n\t\t\tlocal PZ=PlayerChar.Position.Z\n\t\t\tPZ = math.clamp(PZ+Z, PZ-RenderDist, PZ+RenderDist)\n\t\t\tPZ = round2(PlayerChar.Position.Z/1, Size)\n\t\t\tlocal NewVec=Vector3.new(PX, -2.1, PZ)\n\n\t\t\tlocal Dist = (UpdatedPos - PlayerChar.Position).Magnitude\n\n\t\t\t--warn(NewVec)\n\t\t\t--warn(Dist)\n\t\t\tif Dist <= RenderDist then\n\t\t\t\tFunc[2]:SendMessage(\"Begin\", NewVec, RenderDist, LazyChunks, PlayerChar.Parent)\n\t\t\telse\n\t\t\t\t--This -If- May be broken\n\t\t\t\tif LazyChunks~=true then\n\t\t\t\t\tFunc[1].Sensor.Position = NewVec - Func[1].Sensor.Position --Works\n\t\t\t\tend\n\n\t\t\t\tFunc[2]:SendMessage(\"Begin\", NewVec, RenderDist, LazyChunks, PlayerChar.Parent)\n\t\t\t\t--warn(\"|:\"..script.Name..\"; \"..Func[1].Name..\" Moved (Distance)\")\n\t\t\tend\n\n\t\t--end\n\tend\n\treturn\nend\n\n\nfunction NewThread(AmountOfNewThreads, NewVec, RenderDist, LazyChunks, Parent)\n\twarn(\"Creating \"..AmountOfNewThreads..\" New threads\")\n\tlocal CThread = script:FindFirstChild(\"GridThread\")\n\tfor i=1, AmountOfNewThreads, 1 do\n\t\t--warn(\"Added\")\n\t\tlocal Thread = CThread:Clone()\n\t\tlocal actor = Instance.new(\"Actor\")\n\t\tThread.Parent = actor --actor\n\t\tThread.Name = \"Thread\"..#Threads+1\n\t\tThreads[#Threads+1]={}\n\t\ttable.insert(Threads[#Threads], Thread)\n\t\ttable.insert(Threads[#Threads], actor)\n\t\t\n\t\tactor.Parent=script\n\t\tThread.Enabled=true\n\t\t\n\t\t--Removing this will cause Threads to not resbond\n\t\tStartListener(Threads[#Threads])\n\t\twait(0.1)\n\t\t\n\t\t--Init Thread\n\t\tactor:SendMessage(\"Begin\", Vector3.new(0,-2.1,0), RenderDist, LazyChunks, PlayerChar.Parent)\n\tend\n\treturn\nend\n\nif actor == nil then\n\twarn(\"Creating Actors\")\n\t\n\tlocal CThread = script:FindFirstChild(\"Thread\")\n\twhile #Threads < (script.ThreadCount.Value or 4) do\n\t\tlocal Thread = CThread:Clone()\n\t\tlocal actor = Instance.new(\"Actor\")\n\t\tThread.Parent = actor --actor\n\t\tThread.Name = \"Thread\"..#Threads+1\n\t\tThreads[#Threads+1]={}\n\t\ttable.insert(Threads[#Threads], Thread)\n\t\ttable.insert(Threads[#Threads], actor)\n\t\t\n\t\t--Removing this will cause Threads to not resbond\n\t\tStartListener(Threads[#Threads])\n\tend\n\t\n\twarn(Threads)\n\t-- Parent all actors under self\n\tfor i, ThreadInst in pairs(Threads) do\n\t\tfor i2, ThreadD in pairs(ThreadInst) do\n\t\t\twarn(ThreadD)\n\t\t\tif ThreadD.Name==\"Actor\" then\n\t\t\t\tThreadD.Parent = script\n\t\t\telse\n\t\t\t\tThreadD.Enabled=true\n\t\t\tend\n\t\t\t\n\t\tend\n\tend\n\t\n\t\n\t--Init Thread\n\tlocal X=0\n\tlocal Z=0\n\tfor i, ThreadInst in pairs(Threads) do\n\t\tThreadInst[2]:SendMessage(\"Begin\", Vector3.new(0,-2.1,0), RenderDist, LazyChunks, PlayerChar.Parent)\n\tend\n\t-- exit from the script; the following code will run in each actor\n\t--return\nend\n\nscript.ThreadCount.Changed:Connect(function(Val)\n\t--Remove all threads after Halting them\n\twarn(\"RM\")\n\tlocal ThreadC=#Threads - Val\n\tlocal PX=PlayerChar.Position.X\n\tPX = math.clamp(PX, PX-RenderDist, PX+RenderDist)\n\tPX = round2(PlayerChar.Position.X/1, Size)\n\tlocal PZ=PlayerChar.Position.Z\n\tPZ = math.clamp(PZ, PZ-RenderDist, PZ+RenderDist)\n\tPZ = round2(PlayerChar.Position.Z/1, Size)\n\tlocal NewVec=Vector3.new(PX, -2.1, PZ)\n\t\n\tif Val >= ThreadLimit then\n\t\twarn(\"Limit of \"..ThreadLimit..\" has been reached, you can use more threads with a gamepass\")\n\telse\n\t\tif Val > #Threads then\n\t\t\twarn(\"Adding thread\")\n\t\t\tNewThread(Val-#Threads, NewVec, RenderDist, LazyChunks, PlayerChar.Parent)\n\t\tend\n\tend\n\t\n\t\n\n\tfor i, Thread in pairs(Threads) do\n\t\tif i <= Val then\n\t\t\tThread[1].Enabled=true\n\t\t\tThread[2]:SendMessage(\"Begin\", NewVec, RenderDist, LazyChunks, PlayerChar.Parent)\n\t\telse\n\t\t\tThread[1].Enabled=false\n\t\tend\n\tend\nend)\n\n\n\n--This needs to be reworked\nfor i, Func in pairs(Threads) do\n\tRenderDist=script.RenderDistance.Value\n\tLazyChunks=script.RenderDistance.Value\n\twarn(Threads)\n\tFunc[1].Function.OnInvoke = function(ThreadName, UpdatedPos)\n\t\t--warn(\"B\")\n\t\t--warn(ThreadName)\n\t\t--warn(UpdatedPos)\n\t\t\n\t\tlocal Z=UpdatedPos.Z\n\t\tlocal X=UpdatedPos.X\n\t\tlocal function Run(N1,N2)\n\t\t\tlocal M=math.random(1,4)\n\t\t\tif M==1 then\n\t\t\t\tZ=Z+Size\n\t\t\telseif M==2 then\n\t\t\t\tX=X+Size\n\t\t\telseif M==3 then\n\t\t\t\tZ=Z-Size\n\t\t\telseif M==4 then\n\t\t\t\tX=X-Size\n\t\t\tend\n\t\t\treturn\n\t\tend\n\t\t--Run(1,4)\n\t\t--local NewVec=Vector3.new(X, -2.1, Z)\n\t\t--Func[2]:SendMessage(\"Begin\", NewVec)\n\t\t\n\t\tlocal PX=PlayerChar.Position.X\n\t\tPX = math.clamp(PX+X, PX-RenderDist, PX+RenderDist)\n\t\tPX = round2(PlayerChar.Position.X/1, Size)\n\t\tlocal PZ=PlayerChar.Position.Z\n\t\tPZ = math.clamp(PZ+Z, PZ-RenderDist, PZ+RenderDist)\n\t\tPZ = round2(PlayerChar.Position.Z/1, Size)\n\t\tlocal NewVec=Vector3.new(PX, -2.1, PZ)\n\t\t\n\t\tlocal Dist = (UpdatedPos - PlayerChar.Position).Magnitude\n\t\t\n\t\t--warn(NewVec)\n\t\t--warn(Dist)\n\t\tif Dist <= RenderDist then\n\t\t\tFunc[2]:SendMessage(\"Begin\", NewVec, RenderDist, LazyChunks, PlayerChar.Parent)\n\t\telse\n\t\t\t--This -If- May be broken\n\t\t\tif LazyChunks~=true then\n\t\t\t\tFunc[1].Sensor.Position = NewVec - Func[1].Sensor.Position --Works\n\t\t\tend\n\t\t\t\n\t\t\tFunc[2]:SendMessage(\"Begin\", NewVec, RenderDist, LazyChunks, PlayerChar.Parent)\n\t\t\t--warn(\"|:\"..script.Name..\"; \"..Func[1].Name..\" Moved (Distance)\")\n\t\tend\n\t\t\n\tend\nend\n\n\n\n--[[actor:BindToMessage(\"Return\", function(UpdatedPos)\n\twarn(\"B\")\n\twarn(UpdatedPos)\nend)\n]]"},"Children":{"ThreadCount":{"NME":"ThreadCount","Parent":"ActorManager","Properties":{"Value":"2","Parent":"ActorManager","Archivable":"true","Name":"ThreadCount"},"Children":[],"CLS":"IntValue"},"LazyChunks":{"NME":"LazyChunks","Parent":"ActorManager","Properties":{"Value":"true","Parent":"ActorManager","Archivable":"true","Name":"LazyChunks"},"Children":[],"CLS":"BoolValue"},"RenderDistance":{"NME":"RenderDistance","Parent":"ActorManager","Properties":{"Value":"60","Parent":"ActorManager","Archivable":"true","Name":"RenderDistance"},"Children":[],"CLS":"IntValue"},"GridThread":{"NME":"GridThread","Parent":"ActorManager","Properties":{"Enabled":"false","LinkedSource":"","Disabled":"true","Parent":"ActorManager","Name":"GridThread","Archivable":"true","Source":"print(\"Hello world!\")\nlocal Size=20\nlocal Retry=true\nlocal Idle=false\nlocal FrameBuffer=5\nlocal Frame=0\nlocal Debug=false\n\n\nfunction roundNumber(num, numDecimalPlaces)\n\treturn string.format(\"%.\" .. (numDecimalPlaces or 0) .. \"f\", num)\nend\nfunction round2(n, to)\n\treturn math.floor(n/to + 0.5) * to\nend\nlocal function CreatePart(X, Y, Z)\n\tlocal New=game.Workspace.Baseplate:Clone()\n\tNew.Parent=game.Workspace.TempChunks\n\tNew.Name = \"ChunkSlot\"..math.random(-1270000,1270000)\n\tfor i, Obj in pairs(game.Workspace.TempChunks:GetChildren()) do\n\t\tif Obj.Name==New.Name then\n\t\t\tNew.Name = \"ChunkSlot\"..math.random(-1270000,1270000)\n\t\tend\n\tend\n\tNew.Position=Vector3.new(X,Y,Z)\n\t--if Debug then warn(\"Target Created\") end\n\tRetry=true\n\treturn\nend\n\n\nscript.Parent:GetActor():BindToMessage(\"Begin\", function(StartSearchPos, RenderDist, LazyChunks, PlayerChar)\n\tIdle=false\n\tscript.Sensor.Position=StartSearchPos\n\tscript.Sensor.Transparency=0.7\n\tlocal X=StartSearchPos.X\n\tlocal Z=StartSearchPos.Z\n\tlocal PX = round2(PlayerChar.HumanoidRootPart.Position.X, Size)\n\tlocal PZ = round2(PlayerChar.HumanoidRootPart.Position.Z, Size)\n\tRenderDist=script.Parent.Parent.RenderDistance.Value\n\tLazyChunks=script.Parent.Parent.LazyChunks.Value\n\t\n\t\n\tX = math.clamp(X, PX-RenderDist, PX+RenderDist)\n\tZ = math.clamp(Z, PZ-RenderDist, PZ+RenderDist)\n\t\n\tif RenderDist==nil then\n\t\tRenderDist=60\n\tend\n\t\n\n\t--if Debug then warn(\"/:\"..script.Name..\";\"..\" Thread Starting\") end\n\t\n\tlocal function Run()\n\t\tPX = round2(PlayerChar.HumanoidRootPart.Position.X, Size)\n\t\tPZ = round2(PlayerChar.HumanoidRootPart.Position.Z, Size)\n\t\tRenderDist=script.Parent.Parent.RenderDistance.Value\n\t\tLazyChunks=script.Parent.Parent.LazyChunks.Value\n\t\t\n\t\tlocal Table=script.Sensor:GetTouchingParts()\n\t\tfor i, Obj in pairs(Table) do\n\t\t\t\n\t\t\t--Visual Highlighter\n\t\t\tscript.Sensor.SelectionBox.Adornee=Obj\n\t\t\tscript.Sensor.SelectionBox.Visible=true\n\t\t\t--if Debug then warn(typeof(Obj)) end\n\t\t\tif typeof(Obj)==\"Instance\" then\n\t\t\t\t--if Debug then warn(\"A\") end\n\t\t\t\tlocal M=math.random(1,4)\n\t\t\t\tif M==1 then\n\t\t\t\t\tZ=Z+Size\n\t\t\t\telseif M==2 then\n\t\t\t\t\tX=X+Size\n\t\t\t\telseif M==3 then\n\t\t\t\t\tZ=Z-Size\n\t\t\t\telseif M==4 then\n\t\t\t\t\tX=X-Size\n\t\t\t\telse\n\t\t\t\tend\n\t\t\t\tRetry=true\n\t\t\tend\n\t\t\tX = math.clamp(X, PX-RenderDist, PX+RenderDist)\n\t\t\tZ = math.clamp(Z, PZ-RenderDist, PZ+RenderDist)\n\t\t\tif Retry then\n\t\t\t\t--Idle=true\n\t\t\t\t--script.Function:Invoke(script.Name, Vector3.new(StartSearchPos.X+X, StartSearchPos.Y, StartSearchPos.Z+Z))\n\t\t\t\t--script.Sensor.Position=Vector3.new(StartSearchPos.X+X, StartSearchPos.Y, StartSearchPos.Z+Z)\n\t\t\t\tscript.Sensor.Position=Vector3.new(X, StartSearchPos.Y, Z)\n\t\t\tend\n\t\tend\n\t\tif #Table==0 then\n\t\t\tRetry=false\n\t\telse\n\t\t\tRetry=true\n\t\tend\t\n\t\treturn\n\tend\n\t\n\t\n\n\tif Retry then\n\t\tPX = round2(PlayerChar.HumanoidRootPart.Position.X, Size)\n\t\tPZ = round2(PlayerChar.HumanoidRootPart.Position.Z, Size)\n\t\tRenderDist=script.Parent.Parent.RenderDistance.Value\n\t\tLazyChunks=script.Parent.Parent.LazyChunks.Value\n\t\twhile Retry do\n\t\t\tRun()\n\t\t\tgame[\"Run Service\"].Heartbeat:Wait()\n\t\tend\n\t\tif Retry==false then\n\t\t\t--if Debug then warn(\"Target Made\") end\n\t\t\tCreatePart(X, script.Sensor.Position.Y, Z)\n\t\t\tif Retry==true then\n\t\t\t\tif Debug then warn(\"/:\"..script.Name..\";\"..\" Thread Now Idle\") end\n\t\t\t\tgame[\"Run Service\"].Heartbeat:Wait()\n\t\t\t\tif LazyChunks~=true then\n\t\t\t\t\tscript.Function:Invoke(script.Name, Vector3.new(X, script.Sensor.Position.Y, Z))\n\t\t\t\telse\n\t\t\t\t\t--script.Sensor.Position=Vector3.new(X, StartSearchPos.Y, Z)\n\t\t\t\t\tIdle=true\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tif Debug then warn(\"/:\"..script.Name..\";\"..\" Thread Missing Target/Error (Now Idling)\") end\n\t\t\tscript.Function:Invoke(script.Name, Vector3.new(X, script.Sensor.Position.Y, Z))\n\t\t\tIdle=true\n\t\tend\n\telse\n\t\tIdle=true\n\tend\n\twhile Idle do\n\t\tif Frame >= FrameBuffer then\n\t\t\tFrame=0\n\t\t\tif Idle then\n\t\t\t\tif Debug then warn(\"/:\"..script.Name..\";\"..\" Thread Idle\") end\n\t\t\t\tX = math.clamp(X, PX-RenderDist, PX+RenderDist)\n\t\t\t\tZ = math.clamp(Z, PZ-RenderDist, PZ+RenderDist)\n\t\t\t\tscript.Function:Invoke(script.Name, Vector3.new(X, script.Sensor.Position.Y, Z))\n\t\t\tend\n\t\telse\n\t\t\tFrame+=1\n\t\tend\n\t\twait(0.01)\n\tend\nend)"},"Children":{"Function":{"NME":"Function","Parent":"GridThread","Properties":{"Parent":"GridThread","Name":"Function","Archivable":"true"},"Children":[],"CLS":"BindableFunction"},"Sensor":{"NME":"Sensor","Parent":"GridThread","Properties":{"CFrame":"0, -0.899999619, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1","RightSurface":"Enum.SurfaceType.Smooth","AssemblyAngularVelocity":"0, 0, 0","BottomSurface":"Enum.SurfaceType.Smooth","CanCollide":"true","RootPriority":"0","AssemblyLinearVelocity":"0, 0, 0","Transparency":"1","Orientation":"0, 0, 0","MaterialVariant":"","Reflectance":"0","Color":"0.121569, 0.501961, 0.113725","Massless":"false","CollisionGroupId":"0","Parent":"GridThread","Locked":"false","Material":"Enum.Material.Plastic","Archivable":"true","Size":"10, 1, 10","Name":"Sensor","BackSurface":"Enum.SurfaceType.Smooth","TopSurface":"Enum.SurfaceType.Smooth","CustomPhysicalProperties":"nil","CanQuery":"true","Velocity":"0, 0, 0","CanTouch":"true","CastShadow":"true","Rotation":"0, 0, 0","Anchored":"true","BrickColor":"Forest green","Position":"0, -0.8999996185302734, 0","LeftSurface":"Enum.SurfaceType.Smooth","FrontSurface":"Enum.SurfaceType.Smooth","Shape":"Enum.PartType.Block","PivotOffset":"0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1"},"Children":{"SelectionBox":{"NME":"SelectionBox","Parent":"Sensor","Properties":{"Visible":"false","LineThickness":"0.30000001192092896","Color":"Forest green","SurfaceTransparency":"0.5","Transparency":"0","Color3":"0.121569, 0.501961, 0.113725","Parent":"Sensor","Name":"SelectionBox","Archivable":"true","SurfaceColor3":"0.67451, 0, 0.0117647","Adornee":"Baseplate"},"Children":[],"CLS":"SelectionBox"}},"CLS":"Part"}},"CLS":"Script"}},"CLS":"Script"}},"PackageInfo":{"PackageNME":"OldAsset(RemoveMe)","PackageDESC":"No Desc information Set!"}}}
